{"version":3,"file":"rx-util-es.js","sources":["../src/module/ajax/download.js","../src/module/ajax/downloadString.js","../src/module/ajax/downloadUrl.js","../src/module/ajax/getCookies.js","../src/module/ajax/loadResource.js","../src/module/ajax/parseUrl.js","../src/module/ajax/readLocal.js","../src/module/date/dateFormat.js","../src/module/ajax/spliceParams.js","../src/module/ajax/fetchTimeout.js","../src/module/ajax/strToArrayBuffer.js","../src/module/function/wait.js","../src/module/ajax/FetchLimiting.js","../src/module/array/asIterator.js","../src/module/array/asyncFlatMap.js","../src/module/array/flatMap.js","../src/module/array/groupBy.js","../src/module/array/range.js","../src/module/array/toObject.js","../src/module/array/uniqueBy.js","../src/module/array/arrayToMap.js","../src/module/string/fill.js","../src/module/date/dateParse.js","../src/module/date/strToDate.js","../src/module/dom/copyText.js","../src/module/dom/createElByString.js","../src/module/dom/getCusorPostion.js","../src/module/dom/setCusorPostion.js","../src/module/dom/insertText.js","../src/module/string/toLowerCase.js","../src/module/dom/isEditable.js","../src/module/dom/lastFocus.js","../src/module/dom/removeEl.js","../src/module/dom/removeText.js","../src/module/event/watchEventListener.js","../src/module/formdata/appends.js","../src/module/formdata/deletes.js","../src/module/formdata/sets.js","../src/module/formdata/formDataToArray.js","../src/module/formdata/objToFormData.js","../src/module/function/debounce.js","../src/module/function/returnItself.js","../src/module/function/safeExec.js","../src/module/function/singleModel.js","../src/module/function/StateMachine.js","../src/module/function/throttle.js","../src/module/function/timing.js","../src/module/function/waitResource.js","../src/module/function/watch.js","../src/module/function/watchObject.js","../src/module/string/format.js","../src/module/obj/isNullOrUndefined.js","../src/module/string/stringValidator.js","../src/module/string/isFloat.js","../src/module/string/isNumber.js","../src/module/string/toUpperCase.js","../src/module/string/blankToNull.js","../src/module/obj/getObjectKeys.js","../src/module/obj/blankToNullField.js","../src/module/obj/emptyAllField.js","../src/module/obj/excludeFields.js","../src/module/obj/mapToObject.js","../src/module/number/randomInt.js","../src/module/date/getYearWeek.js","../src/module/date/dateConstants.js","../src/module/number/isRange.js","../src/module/date/DateConstants.js","../src/module/date/dateEnhance.js","../src/module/date/dateBetween.js","../src/module/function/once.js","../src/module/function/onceOfSameParam.js","../src/module/function/returnReasonableItself.js","../src/module/array/filterItems.js","../src/module/array/arrayDiffBy.js","../src/module/number/autoIncrement.js","../src/module/string/StringConverter.js","../src/module/obj/getObjectValues.js","../src/module/obj/deepFreeze.js","../src/module/obj/deepProxy.js","../src/module/function/curry.js","../src/module/array/sortBy.js","../src/module/string/isEmpty.js","../src/module/date/DateFormatter.js","../src/module/function/compose.js","../src/module/obj/excludeFieldsDeep.js","../src/module/string/toString.js","../src/module/cache/CacheOption.js","../src/module/obj/getObjectEntries.js","../src/module/obj/assign.js","../src/module/cache/ICache.js","../src/module/cache/CacheVal.js","../src/module/cache/LocalStorageCache.js","../src/module/cache/cacheUtil.js","../src/module/function/emptyFunc.js","../src/module/hook/antiDebug.js","../src/module/string/isBlank.js","../src/module/ajax/loadScript.js","../src/module/function/deny.js","../src/module/array/arrayValidator.js","../src/module/string/pathUtil.js","../src/module/hook/logger.js","../src/module/obj/objectToMap.js","../src/module/tree/listToTree.js","../src/module/function/bridge.js","../src/module/tree/Node.js","../src/module/tree/treeMapping.js","../src/module/tree/treeToList.js","../src/module/tree/NodeBridge.js","../src/module/tree/NodeBridgeUtil.js"],"sourcesContent":["/**\r\n * 在浏览器上下载二进制资源\r\n * @param {Blob} blob 要下载的二进制资源\r\n * @param {String} filename 文件名\r\n */\r\nexport function download (blob, filename = 'unknown') {\r\n  // 创建隐藏的可下载链接\r\n  const eleLink = document.createElement('a')\r\n  eleLink.download = filename\r\n  eleLink.style.display = 'none'\r\n  // 为 link 赋值\r\n  eleLink.href = URL.createObjectURL(blob)\r\n  // 触发点击\r\n  document.body.appendChild(eleLink)\r\n  eleLink.click()\r\n  // 然后移除\r\n  document.body.removeChild(eleLink)\r\n}\r\n","import { download } from './download'\r\n\r\n/**\r\n * 在浏览器上下载文本内容\r\n * @param {String} str 字符串内容\r\n * @param {String} [filename='unknown.txt'] 下载文件名，没有则默认为链接中的文件名\r\n */\r\nexport async function downloadString (str, filename = 'unknown.txt') {\r\n  const blob = new Blob([str], {\r\n    type: 'text/plain',\r\n  })\r\n  download(blob, filename)\r\n}\r\n","import { download } from './download'\r\n\r\n/**\r\n * 根据 url 下载二进制资源\r\n * @param {String} url 下载请求信息\r\n * @param {String} [filename] 下载文件名，没有则默认为链接中的文件名\r\n */\r\nexport async function downloadUrl (\r\n  url,\r\n  filename = url.substr(url.lastIndexOf('/'))\r\n) {\r\n  try {\r\n    const res = await fetch(url)\r\n    const blob = await res.blob()\r\n    download(blob, filename)\r\n  } catch (error) {\r\n    return console.log('下载出错了 ', error)\r\n  }\r\n}\r\n","/**\r\n * 获取 cookie 键值映射 Map\r\n * @returns {Map.<String,String>} cookie 键值映射 Map\r\n */\r\nexport function getCookies () {\r\n  return document.cookie\r\n    .split(';')\r\n    .map(str => str.split('='))\r\n    .map(arr => [arr[0].trim(), arr[1].trim()])\r\n    .reduce((res, [k, v]) => res.set(k, v), new Map())\r\n}\r\n","/**\r\n * 将 url 中的内容加载到元素上\r\n * 注：domSelector 必须有 src 属性用以将加载完成的资源赋值给其，加载默认是异步的\r\n * @param {RequestInfo} url url 资源\r\n * @param {HTMLImageElement | HTMLAudioElement | HTMLVideoElement | HTMLTrackElement | HTMLScriptElement} dom dom 元素\r\n * @param {RequestInit} [init] 初始化参数, 实为 fetch() 的参数以及一些自定义的参数，默认 {}\r\n * 关于 fetch 具体可以参考 <https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch>\r\n */\r\nexport async function loadResource (url, dom, init = {}) {\r\n  const res = await fetch(url, init)\r\n  const blob = await res.blob()\r\n  // 生成一个本地的 url 并赋值给 src 属性\r\n  dom.src = window.URL.createObjectURL(blob)\r\n}\r\n","/**\r\n * Url 对象\r\n * @class UrlObject\r\n */\r\nclass UrlObject {\r\n  /**\r\n   * 构造函数\r\n   * @param {Object} option 可选项\r\n   * @param {String} [option.href=''] 不包含网站域名的链接\r\n   * @param {String} [option.website=''] URL 站点\r\n   * @param {String} [option.protocol=''] 协议\r\n   * @param {String} [option.domain=''] 域名\r\n   * @param {String} [option.accessPath=''] 绝对路径,不包含参数\r\n   * @param {Object} [option.params={}] 参数列表,\r\n   * @param {String} [option.url=''] 原 url 链接\r\n   * @param {Number} [option.port=0] 端口号\r\n   */\r\n  constructor ({\r\n    href = '',\r\n    website = '',\r\n    protocol = '',\r\n    domain = '',\r\n    accessPath = '',\r\n    params = {},\r\n    url = '',\r\n    port = 0,\r\n  } = {}) {\r\n    /**\r\n     * @type {String} 不包含网站域名的链接\r\n     */\r\n    this.href = href\r\n    /**\r\n     * @type {String} URL 站点\r\n     */\r\n    this.website = website\r\n    /**\r\n     * @type {String} 协议\r\n     */\r\n    this.protocol = protocol\r\n    /**\r\n     * @type {String} 域名\r\n     */\r\n    this.domain = domain\r\n    /**\r\n     * @type {String} 绝对路径,不包含参数\r\n     */\r\n    this.accessPath = accessPath\r\n    /**\r\n     * @type {Object} 参数列表,\r\n     */\r\n    this.params = params\r\n    /**\r\n     * @type {String} 原 url 链接\r\n     */\r\n    this.url = url\r\n    /**\r\n     * @type {Number} 端口号\r\n     */\r\n    this.port = port\r\n  }\r\n}\r\n\r\n/**\r\n * 协议与默认端口映射表\r\n */\r\nconst protocol2Port = {\r\n  http: 80,\r\n  https: 443,\r\n  ssh: 22,\r\n  ftp: 21,\r\n}\r\n\r\n/**\r\n * 解析 url 字符串\r\n * @param {String} url url 字符串，不能为空\r\n * @returns {UrlObject} url 对象\r\n */\r\nexport function parseUrl (url) {\r\n  if (!url) {\r\n    throw new Error('url 不能为空')\r\n  }\r\n\r\n  const regexp = new RegExp('^((\\\\w+)://([\\\\w\\\\.]*)(:(\\\\d+))?)(.*)')\r\n  const temps = regexp.exec(url)\r\n  const res = new UrlObject({\r\n    url: url,\r\n    website: temps[1],\r\n    protocol: temps[2],\r\n    domain: temps[3],\r\n    // @ts-ignore\r\n    port: temps[5],\r\n    href: temps[6],\r\n  })\r\n  let temp = url.substr(res.website.length)\r\n  const markIndex = temp.indexOf('?')\r\n  if (markIndex === -1) {\r\n    res.accessPath = temp\r\n    return res\r\n  }\r\n  res.accessPath = temp.substr(0, markIndex)\r\n  if (res.accessPath.endsWith('/')) {\r\n    res.accessPath = res.accessPath.substring(0, res.accessPath.length - 1)\r\n  }\r\n  res.port = res.port || protocol2Port[res.protocol] || ''\r\n  // 解析参数列表\r\n  res.params = temp\r\n    .substr(markIndex + 1)\r\n    .split('&')\r\n    .map(str => str.split('='))\r\n    .filter(arr => arr[0] !== '')\r\n    .reduce((params, arr) => {\r\n      const k = decodeURIComponent(arr[0])\r\n      const v = decodeURIComponent(arr.length === 1 ? '' : arr[1])\r\n      // 如果已经存在了就认为是数组参数\r\n      const vs = params[k]\r\n      if (vs !== undefined) {\r\n        if (!Array.isArray(vs)) {\r\n          params[k] = [vs]\r\n        }\r\n        params[k].push(v)\r\n      } else {\r\n        params[k] = v\r\n      }\r\n      return params\r\n    }, {})\r\n  return res\r\n}\r\n","/**\r\n * 读取本地浏览器选择的文件\r\n * @param {File} file 选择的文件\r\n * @param {Object} option 可选项参数\r\n * @param { readLocal.DataURL | readLocal.Text | readLocal.BinaryString | readLocal.ArrayBuffer } [option.type=readLocal.DataURL] 读取的类型，默认按照二进制 url 读取\r\n * @param {String} [option.encoding='UTF-8'] 读取的编码格式，默认为 UTF-8\r\n * @returns {Promise} 返回了读取到的内容（异步）\r\n */\r\nexport function readLocal (\r\n  file,\r\n  { type = readLocal.DataURL, encoding = 'UTF-8' } = {}\r\n) {\r\n  return new Promise((resolve, reject) => {\r\n    if (!file) {\r\n      reject(new Error('file not exists'))\r\n    }\r\n    const fr = new FileReader()\r\n    fr.onload = event => {\r\n      // @ts-ignore\r\n      resolve(event.target.result)\r\n    }\r\n    fr.onerror = error => {\r\n      reject(error)\r\n    }\r\n    fr[type](file, encoding)\r\n  })\r\n}\r\nreadLocal.DataURL = 'readAsDataURL'\r\nreadLocal.Text = 'readAsText'\r\nreadLocal.BinaryString = 'readAsBinaryString'\r\nreadLocal.ArrayBuffer = 'readAsArrayBuffer'\r\n","/**\r\n * 为 js 中的 Date 对象原型添加 format 格式化方法\r\n * @param {Date} date 要进行格式化的日期\r\n * @param {String} fmt 日期的格式\r\n * @returns {String} 格式化得到的结果\r\n */\r\nexport function dateFormat (date, fmt) {\r\n  const o = {\r\n    'y+': date.getFullYear(),\r\n    'M+': date.getMonth() + 1, // 月份\r\n    'd+': date.getDate(), // 日\r\n    'h+': date.getHours(), // 小时\r\n    'm+': date.getMinutes(), // 分\r\n    's+': date.getSeconds(), // 秒\r\n    'q+': Math.floor((date.getMonth() + 3) / 3), // 季度\r\n    'S+': date.getMilliseconds(), // 毫秒\r\n  }\r\n  for (const k in o) {\r\n    if (!new RegExp('(' + k + ')').test(fmt)) {\r\n      continue\r\n    }\r\n    if (k === 'y+') {\r\n      fmt = fmt.replace(RegExp.$1, ('' + o[k]).substr(4 - RegExp.$1.length))\r\n    } else if (k === 'S+') {\r\n      let lens = RegExp.$1.length\r\n      lens = lens === 1 ? 3 : lens\r\n      fmt = fmt.replace(\r\n        RegExp.$1,\r\n        ('00' + o[k]).substr(('' + o[k]).length - 1, lens)\r\n      )\r\n    } else {\r\n      fmt = fmt.replace(\r\n        RegExp.$1,\r\n        RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length)\r\n      )\r\n    }\r\n  }\r\n  return fmt\r\n}\r\n","import { dateFormat } from './../date/dateFormat'\r\n\r\n/**\r\n * 默认的日期格式\r\n * 不加 Z 为本地日期时间\r\n */\r\nconst deteFormatter = 'yyyy-MM-ddThh:mm:ss.SSS'\r\n/**\r\n * 编码函数\r\n * @param {String} k 参数的名字\r\n * @param {String} v 参数的值\r\n */\r\nconst encode = (k, v) => encodeURIComponent(k) + '=' + encodeURIComponent(v)\r\n\r\n/**\r\n * 拼接参数字符串\r\n * @param {Object} params 参数对象\r\n * @returns {String} 拼接后的字符串\r\n */\r\nexport function spliceParams (params = {}) {\r\n  if (!(params instanceof Object)) {\r\n    throw new Error(`The parameter type must be Object: ${params}`)\r\n  }\r\n  return Array.from(Object.entries(params)).reduce((res, [k, v]) => {\r\n    if (v === undefined || v === null) {\r\n      return res\r\n    } else if (v instanceof Date) {\r\n      res += encode(k, dateFormat(v, deteFormatter))\r\n    } else if (v instanceof Array) {\r\n      res += v\r\n        .map(item =>\r\n          encode(\r\n            k,\r\n            item instanceof Date ? dateFormat(item, deteFormatter) : item\r\n          )\r\n        )\r\n        .join('&')\r\n    } else {\r\n      res += encode(k, v)\r\n    }\r\n    return (res += '&')\r\n  }, '')\r\n}\r\n","/**\r\n * 为 fetch 请求添加超时选项\r\n * 注：超时选项并非真正意义上的超时即取消请求，请求依旧正常执行完成，但会提前返回 reject 结果\r\n * @param {Promise} fetchPromise fetch 请求的 Promise\r\n * @param {Number} timeout 超时时间\r\n * @returns {Promise} 如果超时就提前返回 reject, 否则正常返回 fetch 结果\r\n */\r\nexport function fetchTimeout (fetchPromise, timeout) {\r\n  let abortFn = null\r\n  // 这是一个可以被 reject 的 Promise\r\n  const abortPromise = new Promise(function (resolve, reject) {\r\n    abortFn = function () {\r\n      reject(new Error('abort promise'))\r\n    }\r\n  })\r\n  // 有一个 Promise 完成就立刻结束\r\n  const abortablePromise = Promise.race([fetchPromise, abortPromise])\r\n  setTimeout(function () {\r\n    abortFn()\r\n  }, timeout)\r\n  return abortablePromise\r\n}\r\n","/**\r\n * 将字符串转为字符流\r\n *\r\n * @param {String} str 字符串\r\n * @returns {ArrayBuffer} 字符流对象\r\n */\r\nexport function strToArrayBuffer (str) {\r\n  const buf = new ArrayBuffer(str.length)\r\n  const view = new Uint8Array(buf)\r\n  for (let i = 0; i !== str.length; ++i) {\r\n    view[i] = str.charCodeAt(i) & 0xff\r\n  }\r\n  return buf\r\n}\r\n","/**\r\n * 等待指定的时间/等待指定表达式成立\r\n * 如果未指定等待条件则立刻执行\r\n * @param {Number|Function} [param] 等待时间/等待条件\r\n * @returns {Promise} Promise 对象\r\n */\r\nexport const wait = param => {\r\n  return new Promise(resolve => {\r\n    if (typeof param === 'number') {\r\n      setTimeout(resolve, param)\r\n    } else if (typeof param === 'function') {\r\n      const timer = setInterval(() => {\r\n        if (param()) {\r\n          clearInterval(timer)\r\n          resolve()\r\n        }\r\n      }, 100)\r\n    } else {\r\n      resolve()\r\n    }\r\n  })\r\n}\r\n","import { wait } from '../function/wait'\r\nimport { fetchTimeout } from './fetchTimeout'\r\n\r\n/**\r\n * 限制并发请求数量的 fetch 封装\r\n * @class FetchLimiting\r\n * @example\r\n * const fetchLimiting = new FetchLimiting()\r\n * fetchLimiting._fetch('/')\r\n *   .then(res => res.json())\r\n *   .then(json => console.log(json))\r\n */\r\nexport class FetchLimiting {\r\n  /**\r\n   * 构造函数\r\n   * @param {Object} [option] 可选配置项\r\n   * @param {Number} [option.timeout=10000] 超时毫秒数\r\n   * @param {Number} [option.limit=10] 最大并发数限制\r\n   */\r\n  constructor ({ timeout = 10000, limit = 10 }) {\r\n    /**\r\n     * @field timeout 超时毫秒数\r\n     */\r\n    this.timeout = timeout\r\n    /**\r\n     * @field limit 最大并发数限制\r\n     */\r\n    this.limit = limit\r\n    /**\r\n     * @field execCount 当前正在执行异步的数量\r\n     */\r\n    this.execCount = 0\r\n    /**\r\n     * @field waitArr 等待的队列\r\n     * @type {Array.<IArguments>}\r\n     */\r\n    this.waitArr = []\r\n  }\r\n\r\n  /**\r\n   * 执行一个请求\r\n   * 如果到达最大并发限制时就进行等待\r\n   * @param {RequestInfo} url 请求 url 信息\r\n   * @param {RequestInit} [init=undefined] 请求的其他可选项，默认为 undefined\r\n   * @returns {Promise} 如果超时就提前返回 reject, 否则正常返回 fetch 结果\r\n   */\r\n  async fetch (url, init) {\r\n    const _innerFetch = async () => {\r\n      this.execCount++\r\n      const args = this.waitArr.shift()\r\n      try {\r\n        // 这里的 args 实际上就是 arguments 对象，即上面的 url 和 init\r\n        // @ts-ignore\r\n        return await fetchTimeout(fetch(...args), this.timeout)\r\n      } finally {\r\n        this.execCount--\r\n      }\r\n    }\r\n    this.waitArr.push(arguments)\r\n    await wait(() => this.execCount < this.limit)\r\n    // 尝试启动等待队列\r\n    return _innerFetch()\r\n  }\r\n}\r\n","/**\r\n * 将一个 Iterator 迭代器转换为一个 Array\r\n * 目前 {@override Array.from} 已取代改函数\r\n * @param {Iterator.<Object>} iterator Iterator 迭代器\r\n * @return {Array.<Object>} Iterator 中每一项元素转换而得到的 Array\r\n */\r\nexport function asIterator (iterator) {\r\n  const arr = []\r\n  while (true) {\r\n    const next = iterator.next()\r\n    if (next.done) {\r\n      break\r\n    }\r\n    arr.push(next.value)\r\n  }\r\n  return arr\r\n}\r\n","/**\r\n * 将数组异步压平一层\r\n * @param {Array.<Object>} arr 数组\r\n * @param {Function} fn 映射函数，将一个元素映射为一个数组\r\n * @returns {Promise.<Array.<Object>>} 压平一层的数组\r\n */\r\nexport async function asyncFlatMap (arr, fn) {\r\n  const res = []\r\n  for (let i = 0; i < arr.length; i++) {\r\n    res.push(...(await fn(arr[i])))\r\n  }\r\n  return res\r\n}\r\n","/**\r\n * 自行实现 flatMap，将数组压平一层\r\n * @param {Array.<Object>} arr 数组\r\n // @ts-ignore\r\n * @param {function(item:Object):Array.<Object>} fn 映射方法，将一个元素映射为一个数组\r\n * @returns {Array.<Object>} 压平一层的数组\r\n */\r\nexport function flatMap (arr, fn) {\r\n  // @ts-ignore\r\n  return arr.reduce((res, item, ...args) => res.concat(fn(item, ...args)), [])\r\n}\r\n","/**\r\n * js 数组按照某个条件进行分组\r\n *\r\n * @param {Array<Object>} arr 要进行分组的数组\r\n * @param {Function} kFn 元素分组的唯一标识函数\r\n * @param {Function} [vFn] 元素分组的值处理的函数。第一个参数是累计值，第二个参数是当前正在迭代的元素，如果你使用过 {@link Array#reduce} 函数的话应该对此很熟悉\r\n * @param {Function} [init=[]] 每个分组的产生初始值的函数。类似于 reduce 的初始值，但它是一个函数，避免初始值在所有分组中进行累加。\r\n * @returns {Map<Object,Object>} 元素标识 -> 数组映射 Map\r\n */\r\nexport function groupBy (\r\n  arr,\r\n  kFn,\r\n  /**\r\n   * 默认的值处理函数\r\n   * @param {Map} res 最终 map 集合\r\n   * @param {Object} item 当前迭代的元素\r\n   */\r\n  vFn = (res, item) => {\r\n    res.push(item)\r\n    return res\r\n  },\r\n  init = () => []\r\n) {\r\n  // 将元素按照分组条件进行分组得到一个 条件 -> 数组 的对象\r\n  return arr.reduce((res, item, ...args) => {\r\n    const k = kFn(item, ...args)\r\n    // 如果已经有这个键了就直接追加, 否则先将之初始化再追加元素\r\n    if (!res.has(k)) {\r\n      res.set(k, init())\r\n    }\r\n    res.set(k, vFn(res.get(k), item, ...args))\r\n    return res\r\n  }, new Map())\r\n}\r\n","/**\r\n * 创建一个等差数列数组\r\n * @param {Number} start 开始（包含）\r\n * @param {Number} end 结束（不包含）\r\n * @param {Number} [sep] 步长，默认为 1\r\n * @returns {Array.<Number>} 等差数列数组\r\n */\r\nexport function range (start, end, sep = 1) {\r\n  const arr = []\r\n  for (let i = start; i < end; i += sep) {\r\n    arr.push(i)\r\n  }\r\n  return arr\r\n}\r\n","/**\r\n * 将数组转化为一个 Object 对象\r\n * @deprecated 已废弃，请使用更好的 {@link arrayToMap} 替代\r\n * @param {Array.<Object>} arr 需要进行转换的数组\r\n * @param {Function} kFn 生成对象属性名的函数\r\n * @param {Function} [vFn] 生成对象属性值的函数，默认为数组中的迭代元素\r\n * @returns {Object} 转化得到的对象\r\n */\r\nexport function toObject (arr, kFn, vFn = item => item) {\r\n  return arr.reduce((res, item, ...args) => {\r\n    const k = kFn(item, ...args)\r\n    if (!Reflect.has(res, k)) {\r\n      res[k] = vFn(item, ...args)\r\n    }\r\n    return res\r\n  }, {})\r\n}\r\n","/**\r\n * js 的数组去重方法\r\n * @param {Array.<Object>} arr 要进行去重的数组\r\n * @param {Function} [kFn=item => JSON.stringify(item)] 唯一标识元素的方法，默认使用 {@link JSON.stringify()}\r\n * @returns {Array.<Object>} 进行去重操作之后得到的新的数组 (原数组并未改变)\r\n */\r\nexport function uniqueBy (arr, kFn = item => JSON.stringify(item)) {\r\n  const set = new Set()\r\n  return arr.filter((v, ...args) => {\r\n    const k = kFn(v, ...args)\r\n    if (set.has(k)) {\r\n      return false\r\n    }\r\n    set.add(k)\r\n    return true\r\n  })\r\n}\r\n","/**\r\n * 将数组映射为 Map\r\n * @param {Array.<Object>} array 数组\r\n * @param {function} kFn 产生 Map 元素唯一标识的函数\r\n * @param {Function} [vFn] 产生 Map 值的函数，默认为返回数组的元素\r\n * @returns {Map.<Object,Object>} 映射产生的 map 集合\r\n */\r\nexport function arrayToMap (array, kFn, vFn = v => v) {\r\n  return array.reduce(\r\n    (res, item, ...args) => res.set(kFn(item, ...args), vFn(item, ...args)),\r\n    new Map()\r\n  )\r\n}\r\n","/**\r\n * 填充字符串到指定长度\r\n * @param {String} item 填充的字符串\r\n * @param {Number} len 填充的长度\r\n * @returns {String} 填充完成的字符串\r\n */\r\nexport function fill (item, len) {\r\n  if (len <= 0) {\r\n    return ''\r\n  }\r\n  return item + fill(item, len - 1)\r\n}\r\n","import { fill } from '../string/fill'\r\nimport { arrayToMap } from './../array/arrayToMap'\r\n\r\n/**\r\n * 日期格式化类\r\n * @class DateFormat\r\n */\r\nclass DateFormat {\r\n  /**\r\n   * 构造函数\r\n   * @param {String} name 日期格式的名称\r\n   * @param {String} format 日期的格式值\r\n   * @param {String} value 格式化得到的值\r\n   * @param {Number} index 需要替换位置的索引\r\n   */\r\n  constructor (name, format, value, index) {\r\n    /**\r\n     * @field 日期格式的名称\r\n     */\r\n    this.name = name\r\n    /**\r\n     * @field 日期的格式值\r\n     */\r\n    this.format = format\r\n    /**\r\n     * @field 格式化得到的值\r\n     */\r\n    this.value = value\r\n    /**\r\n     * @field 需要替换位置的索引\r\n     */\r\n    this.index = index\r\n  }\r\n}\r\n\r\n/**\r\n * 日期时间的正则表达式\r\n */\r\nconst dateFormats = {\r\n  year: 'y{4}|y{2}',\r\n  month: 'M{1,2}',\r\n  day: 'd{1,2}',\r\n  hour: 'h{1,2}',\r\n  minute: 'm{1,2}',\r\n  second: 's{1,2}',\r\n  millieSecond: 'S{1,3}',\r\n}\r\n\r\n/**\r\n * 解析字符串为 Date 对象\r\n * @param {String} str 日期字符串\r\n * @param {String} fmt 日期字符串的格式，目前仅支持使用 y(年),M(月),d(日),h(时),m(分),s(秒),S(毫秒)\r\n * @returns {Date} 解析得到的 Date 对象\r\n */\r\nexport function dateParse (str, fmt) {\r\n  const now = new Date()\r\n  // 如果没有格式化某项的话则设置为默认时间\r\n  const defaultDateValues = {\r\n    year: now.getFullYear().toString(),\r\n    month: '01',\r\n    day: '01',\r\n    hour: '00',\r\n    minute: '00',\r\n    second: '00',\r\n    millieSecond: '000',\r\n  }\r\n  // 保存对传入的日期字符串进行格式化的全部信息数组列表\r\n  const dateUnits = []\r\n  for (const fmtName in dateFormats) {\r\n    const regExp = new RegExp(dateFormats[fmtName])\r\n    if (regExp.test(fmt)) {\r\n      const matchStr = regExp.exec(fmt)[0]\r\n      const regexStr = fill('`', matchStr.length)\r\n      const index = fmt.indexOf(matchStr)\r\n      fmt = fmt.replace(matchStr, regexStr)\r\n      dateUnits.push(\r\n        new DateFormat(fmtName, fill('\\\\d', matchStr.length), null, index)\r\n      )\r\n    } else {\r\n      dateUnits.push(\r\n        new DateFormat(fmtName, null, defaultDateValues[fmtName], -1)\r\n      )\r\n    }\r\n  }\r\n  // 进行验证是否真的是符合传入格式的字符串\r\n  fmt = fmt.replace(new RegExp('`', 'g'), '\\\\d')\r\n  if (!new RegExp(`^${fmt}$`).test(str)) {\r\n    return null\r\n  }\r\n  // 进行一次排序, 依次对字符串进行截取\r\n  dateUnits\r\n    // 过滤掉没有得到格式化的对象\r\n    .filter(({ format }) => format)\r\n    // 按照字符串中日期片段的索引进行排序\r\n    .sort(function (a, b) {\r\n      return a.index - b.index\r\n    })\r\n    // 获取到匹配的日期片段的值\r\n    .map(format => {\r\n      const matchDateUnit = new RegExp(format.format).exec(str)\r\n      if (matchDateUnit !== null && matchDateUnit.length > 0) {\r\n        str = str.replace(matchDateUnit[0], '')\r\n        format.value = matchDateUnit[0]\r\n      }\r\n      return format\r\n    })\r\n    // 覆写到 dateStr 上面\r\n    .forEach(({ format }, i) => {\r\n      const matchDateUnit = new RegExp(format).exec(str)\r\n      if (matchDateUnit !== null && matchDateUnit.length > 0) {\r\n        str = str.replace(matchDateUnit[0], '')\r\n        dateUnits[i].value = matchDateUnit[0]\r\n      }\r\n    })\r\n  // 将截取完成的信息封装成对象并格式化标准的日期字符串\r\n  const map = arrayToMap(dateUnits, item => item.name, item => item.value)\r\n  if (map.get('year').length === 2) {\r\n    map.set(\r\n      'year',\r\n      defaultDateValues.year.substr(0, 2).concat(map.get('year'))\r\n    )\r\n  }\r\n  // 注意：此处使用的是本地时间而非 UTC 时间\r\n  const date = `${map.get('year')}-${map.get('month')}-${map.get(\r\n    'day'\r\n  )}T${map.get('hour')}:${map.get('minute')}:${map.get('second')}.${map.get(\r\n    'millieSecond'\r\n  )}`\r\n  return new Date(date)\r\n}\r\n","import { dateParse } from './dateParse'\r\n\r\n/**\r\n * 解析字符串为 Date 对象\r\n * @deprecated 已弃用，请使用可读性更好的 {@link dateParse} 代替\r\n * @param {String} dateStr 日期字符串\r\n * @param {String} fmt 日期字符串的格式\r\n * 目前仅支持使用 y(年),M(月),d(日),h(时),m(分),s(秒),S(毫秒)\r\n * @returns {Date} 解析得到的 Date 对象\r\n */\r\nexport function strToDate (dateStr, fmt) {\r\n  return dateParse(dateStr, fmt)\r\n}\r\n","/**\r\n * 复制一段文本内容\r\n * @param {String} text 要进行复制的文本\r\n * @returns {Boolean} 是否复制成功\r\n */\r\nexport function copyText (text) {\r\n  const input = document.createElement('input')\r\n  document.body.appendChild(input)\r\n  input.setAttribute('value', text)\r\n  input.select()\r\n  const res = document.execCommand('copy')\r\n  document.body.removeChild(input)\r\n  return res\r\n}\r\n","/**\r\n * 根据 html 字符串创建 Element 元素\r\n * @param {String} str html 字符串\r\n * @returns {Element} 创建的 Element 元素\r\n */\r\nexport function createElByString (str) {\r\n  const root = document.createElement('div')\r\n  root.innerHTML = str\r\n  return root.querySelector('*')\r\n}\r\n","/**\r\n * 获取输入框中光标所在位置\r\n * @param  {HTMLFormElement} el 需要获取的输入框元素\r\n * @returns {Number} 光标所在位置的下标\r\n */\r\nexport function getCusorPostion (el) {\r\n  return el.selectionStart\r\n}\r\n","/**\r\n * 设置输入框中选中的文本/光标所在位置\r\n * @param {HTMLFormElement} el 需要设置的输入框元素\r\n * @param {Number} start 光标所在位置的下标\r\n * @param {Number} [end=start] 结束位置，默认为输入框结束\r\n */\r\nexport function setCusorPostion (el, start, end = start) {\r\n  el.focus()\r\n  el.setSelectionRange(start, end)\r\n}\r\n","import { getCusorPostion } from './getCusorPostion'\r\nimport { setCusorPostion } from './setCusorPostion'\r\n\r\n/**\r\n * 在指定位置后插入文本\r\n * @param {HTMLFormElement} el 需要设置的输入框元素\r\n * @param {String} text 要插入的值\r\n * @param {Number} [start] 开始位置，默认为当前光标处\r\n */\r\nexport function insertText (el, text, start = getCusorPostion(el)) {\r\n  const value = el.value\r\n  el.value = value.substr(0, start) + text + value.substr(start)\r\n  setCusorPostion(el, start + text.length)\r\n}\r\n","/**\r\n * 字符串安全的转换为小写\r\n * @param {String} str 字符串\r\n * @returns {String} 转换后得到的全小写字符串\r\n */\r\nexport function toLowerCase (str) {\r\n  if (!str || typeof str !== 'string') {\r\n    return str\r\n  }\r\n  return str.toLowerCase()\r\n}\r\n","import { toLowerCase } from '../string/toLowerCase'\r\n/**\r\n * 判断指定元素是否是可编辑元素\r\n * 注：可编辑元素并不一定能够进行编辑，例如只读的 input 元素\r\n * @param {Element} el 需要进行判断的元素\r\n * @returns {Boolean} 是否为可编辑元素\r\n */\r\nexport function isEditable (el) {\r\n  const inputEls = ['input', 'date', 'datetime', 'select', 'textarea']\r\n  return (\r\n    // 此处需要判断是否存在属性 isContentEditable\r\n    // @ts-ignore\r\n    el && (el.isContentEditable || inputEls.includes(toLowerCase(el.tagName)))\r\n  )\r\n}\r\n","let lastFocusEl\r\n\r\ndocument.addEventListener(\r\n  'focus',\r\n  event => {\r\n    lastFocusEl = event.target\r\n  },\r\n  true\r\n)\r\ndocument.addEventListener(\r\n  'blur',\r\n  () => {\r\n    lastFocusEl = null\r\n  },\r\n  true\r\n)\r\n/**\r\n * 获取到最后一个获得焦点的元素\r\n * @returns {Element} 最后一个获取到焦点的元素\r\n */\r\nexport function lastFocus () {\r\n  return lastFocusEl\r\n}\r\n","/**\r\n * 直接删除指定元素\r\n * @param {Element} el 需要删除的元素\r\n * @returns {Element} 返回被删除的元素\r\n */\r\nexport function removeEl (el) {\r\n  const parent = el.parentElement\r\n  return parent.removeChild(el)\r\n}\r\n","import { getCusorPostion } from './getCusorPostion'\r\nimport { setCusorPostion } from './setCusorPostion'\r\n\r\n/**\r\n * 在指定范围内删除文本\r\n * @param {HTMLFormElement} el 需要设置的输入框元素\r\n * @param {Number} [start] 开始位置，默认为当前选中开始位置\r\n * @param {Number} [end] 结束位置，默认为当前选中结束位置\r\n */\r\nexport function removeText (\r\n  el,\r\n  start = el.selectionStart,\r\n  end = el.selectionEnd\r\n) {\r\n  // 删除之前必须要 [记住] 当前光标的位置\r\n  const index = getCusorPostion(el)\r\n  const value = el.value\r\n  el.value = value.substr(0, start) + value.substr(end, value.length)\r\n  setCusorPostion(el, index)\r\n}\r\n","/**\r\n * 监听 event 的添加\r\n * 注：必须及早添加\r\n */\r\nexport function watchEventListener () {\r\n  /**\r\n   * 监听所有的 addEventListener, removeEventListener 事件\r\n   */\r\n  const documentAddEventListener = document.addEventListener\r\n  const eventTargetAddEventListener = EventTarget.prototype.addEventListener\r\n  const documentRemoveEventListener = document.removeEventListener\r\n  const eventTargetRemoveEventListener =\r\n    EventTarget.prototype.removeEventListener\r\n  const events = []\r\n\r\n  /**\r\n   * 用来保存监听到的事件信息\r\n   */\r\n  class Event {\r\n    constructor (el, type, listener, useCapture) {\r\n      this.el = el\r\n      this.type = type\r\n      this.listener = listener\r\n      this.useCapture = useCapture\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 自定义的添加事件监听函数\r\n   * @param {String} type 事件类型\r\n   * @param {EventListener} listener 事件监听函数\r\n   * @param {Boolean} [useCapture=true] 是否需要捕获事件冒泡，默认为 false\r\n   */\r\n  function addEventListener (type, listener, useCapture = false) {\r\n    const _this = this\r\n    const $addEventListener =\r\n      _this === document\r\n        ? documentAddEventListener\r\n        : eventTargetAddEventListener\r\n    events.push(new Event(_this, type, listener, useCapture))\r\n    $addEventListener.apply(this, arguments)\r\n  }\r\n\r\n  /**\r\n   * 自定义的根据类型删除事件函数\r\n   * 该方法会删除这个类型下面全部的监听函数，不管数量\r\n   * @param {String} type 事件类型\r\n   */\r\n  // @ts-ignore\r\n  function removeEventListenerByType (type) {\r\n    const _this = this\r\n    const $removeEventListener =\r\n      _this === document\r\n        ? documentRemoveEventListener\r\n        : eventTargetRemoveEventListener\r\n    const removeIndexArr = events\r\n      .map((e, i) => (e.el === _this || e.type === arguments[0] ? i : -1))\r\n      .filter(i => i !== -1)\r\n    removeIndexArr.forEach(i => {\r\n      const e = events[i]\r\n      $removeEventListener.apply(e.el, [e.type, e.listener, e.useCapture])\r\n    })\r\n    removeIndexArr.sort((a, b) => b - a).forEach(i => events.splice(i, 1))\r\n  }\r\n\r\n  (function initWatchDOM () {\r\n    document.addEventListener = EventTarget.prototype.addEventListener = addEventListener\r\n    // 此处是为了新增函数 removeEventListenerByType\r\n    // @ts-ignore\r\n    document.removeEventListenerByType = EventTarget.prototype.removeEventListenerByType = removeEventListenerByType\r\n  })()\r\n}\r\n","/**\r\n * FormData 批量添加方法\r\n * 注：该方法不会覆盖掉原本的属性\r\n * @param {FormData} fd FormData 对象\r\n * @param {Object} obj 键值对对象\r\n * @returns {FormData} 添加完成后的 FormData 对象\r\n */\r\nexport function appends (fd, obj) {\r\n  for (const key in obj) {\r\n    fd.append(key, obj[key])\r\n  }\r\n  return fd\r\n}\r\n","/**\r\n * FormData 批量删除方法\r\n * @param {FormData} fd FormData 对象\r\n * @param {Array} keys  删除的 key 列表\r\n * @returns {FormData} 返回删除后的 FormData 对象\r\n */\r\nexport function deletes (fd, keys) {\r\n  keys.forEach(key => fd.delete(key))\r\n  return fd\r\n}\r\n","/**\r\n * FormData 批量设置方法\r\n * 注：该方法会覆盖掉原本的属性\r\n * @param {FormData} fd 表单对象\r\n * @param {Object} obj 键值对对象\r\n * @returns {FormData} 设置完成后的 FormData 对象\r\n */\r\nexport function sets (fd, obj) {\r\n  for (const k in obj) {\r\n    fd.set(k, obj[k])\r\n  }\r\n  return fd\r\n}\r\n","import { asIterator } from './../array/asIterator'\r\n\r\n/**\r\n * FormData 转换为包含所有键值数组的二维数组函数\r\n *\r\n * @param {FormData} fd 需要转换的 FormData 对象\r\n * @returns {Array} 转换后的数组\r\n * @deprecated 已被原生函数 Array.from 取代\r\n */\r\nexport function formDataToArray (fd) {\r\n  // @ts-ignore\r\n  return asIterator(fd.entries())\r\n}\r\n","/**\r\n * 将参数对象转换为 FormData，只转换一层\r\n * @param data 参数对象\r\n * @return {FormData} 转换后的表单对象\r\n */\r\nexport function objToFormData (data) {\r\n  const fd = new FormData()\r\n  if (data) {\r\n    for (const k in data) {\r\n      if (data.hasOwnProperty(k)) {\r\n        const v = data[k]\r\n        fd.append(k, v)\r\n      }\r\n    }\r\n  }\r\n  return fd\r\n}\r\n","/**\r\n * 函数去抖\r\n * 去抖 (debounce) 去抖就是对于一定时间段的连续的函数调用，只让其执行一次\r\n * 注: 包装后的函数如果两次操作间隔小于 delay 则不会被执行, 如果一直在操作就会一直不执行, 直到操作停止的时间大于 delay 最小间隔时间才会执行一次, 不管任何时间调用都需要停止操作等待最小延迟时间\r\n * 应用场景主要在那些连续的操作, 例如页面滚动监听, 包装后的函数只会执行最后一次\r\n * 注: 该函数第一次调用一定不会执行，第一次一定拿不到缓存值，后面的连续调用都会拿到上一次的缓存值。如果需要在第一次调用获取到的缓存值，则需要传入第三个参数 {@link init}，默认为 {@link undefined} 的可选参数\r\n * 注: 返回函数结果的高阶函数需要使用 {@link Proxy} 实现，以避免原函数原型链上的信息丢失\r\n *\r\n * @param {Number} delay 最小延迟时间，单位为 ms\r\n * @param {Function} action 真正需要执行的操作\r\n * @param {Object} [init=undefined] 初始的缓存值，不填默认为 {@link undefined}\r\n * @return {Function} 包装后有去抖功能的函数。该函数是异步的，与需要包装的函数 {@link action} 是否异步没有太大关联\r\n */\r\nexport const debounce = (delay, action, init = undefined) => {\r\n  let flag\r\n  let result = init\r\n  return new Proxy(action, {\r\n    apply (target, thisArg, args) {\r\n      return new Promise(resolve => {\r\n        if (flag) clearTimeout(flag)\r\n        flag = setTimeout(\r\n          () => resolve((result = Reflect.apply(target, thisArg, args))),\r\n          delay\r\n        )\r\n        setTimeout(() => resolve(result), delay)\r\n      })\r\n    },\r\n  })\r\n}\r\n","/**\r\n * 返回参数本身的函数\r\n * @param {Object} obj 任何对象\r\n * @returns {Object} 传入的第一个参数\r\n */\r\nexport function returnItself (obj) {\r\n  return obj\r\n}\r\n","/**\r\n * 安全执行某个函数\r\n * @param {Function} fn 需要执行的函数\r\n * @param {Object} [defaultVal=null] 发生异常后的默认返回值，默认为 null\r\n * @param {...Object} [args] 可选的函数参数\r\n * @returns {Object|undefined} 函数执行的结果，或者其默认值\r\n */\r\nexport const safeExec = (fn, defaultVal = null, ...args) => {\r\n  try {\r\n    return fn(...args)\r\n  } catch (err) {\r\n    return defaultVal\r\n  }\r\n}\r\n","/**\r\n * 使用 Proxy 实现通用的单例模式\r\n * @param {Object} clazz 需要包装为单例的类型\r\n * @returns {Object} 包装后的单例模式类，使用 {@code new} 创建将只在第一次有效\r\n */\r\nexport function singleModel (clazz) {\r\n  let instance\r\n  return new Proxy(clazz, {\r\n    construct (target, args, newTarget) {\r\n      if (instance) {\r\n        return instance\r\n      }\r\n      instance = Reflect.construct(target, args, newTarget)\r\n      return instance\r\n    },\r\n  })\r\n}\r\n","import { singleModel } from './singleModel'\r\n\r\n/**\r\n * 状态机\r\n * 用于避免使用 if-else 的一种方式\r\n */\r\nexport class StateMachine {\r\n  /**\r\n   * 获取到一个状态工厂\r\n   */\r\n  static getFactory () {\r\n    const classMap = new Map()\r\n    /**\r\n     * 状态注册器\r\n     * 更好的有限状态机，分离子类与构建的关系，无论子类如何增删该都不影响基类及工厂类\r\n     */\r\n    return new class Builder {\r\n      /**\r\n       * 注册一个 class，创建子类时调用，用于记录每一个 [状态 => 子类] 对应\r\n       * @param {Number|String} state 作为键的状态\r\n       * @param {Object} clazz 对应的子类型\r\n       * @returns {Object} 返回 clazz 本身\r\n       */\r\n      register (state, clazz) {\r\n        classMap.set(state, singleModel(clazz))\r\n        return clazz\r\n      }\r\n\r\n      // noinspection JSMethodCanBeStatic\r\n      /**\r\n       * 获取一个标签子类对象\r\n       * @param {Number|String} state 状态索引\r\n       * @param {...Object} [args] 构造函数的参数\r\n       * @returns {Object} 子类对象\r\n       */\r\n      getInstance (state, ...args) {\r\n        const Class = classMap.get(state)\r\n        if (!Class) {\r\n          return null\r\n        }\r\n        // 构造函数的参数\r\n        return new Class(...args)\r\n      }\r\n    }()\r\n  }\r\n}\r\n","/**\r\n * 函数节流\r\n * 节流 (throttle) 让一个函数不要执行的太频繁，减少执行过快的调用，叫节流\r\n * 类似于上面而又不同于上面的函数去抖, 包装后函数在上一次操作执行过去了最小间隔时间后会直接执行, 否则会忽略该次操作\r\n * 与上面函数去抖的明显区别在连续操作时会按照最小间隔时间循环执行操作, 而非仅执行最后一次操作\r\n * 注: 该函数第一次调用一定会执行，不需要担心第一次拿不到缓存值，后面的连续调用都会拿到上一次的缓存值\r\n * 注: 返回函数结果的高阶函数需要使用 {@link Proxy} 实现，以避免原函数原型链上的信息丢失\r\n *\r\n * @param {Number} delay 最小间隔时间，单位为 ms\r\n * @param {Function} action 真正需要执行的操作\r\n * @return {Function} 包装后有节流功能的函数。该函数是异步的，与需要包装的函数 {@link action} 是否异步没有太大关联\r\n */\r\nexport const throttle = (delay, action) => {\r\n  let last = 0\r\n  let result\r\n  return new Proxy(action, {\r\n    apply (target, thisArg, args) {\r\n      return new Promise(resolve => {\r\n        const curr = Date.now()\r\n        if (curr - last > delay) {\r\n          result = Reflect.apply(target, thisArg, args)\r\n          last = curr\r\n          resolve(result)\r\n          return\r\n        }\r\n        resolve(result)\r\n      })\r\n    },\r\n  })\r\n}\r\n","/**\r\n * 测试函数的执行时间\r\n * 注：如果函数返回 Promise，则该函数也会返回 Promise，否则直接返回执行时间\r\n * @param {Function} fn 需要测试的函数\r\n * @returns {Number|Promise} 执行的毫秒数\r\n */\r\nexport const timing = fn => {\r\n  const begin = performance.now()\r\n  const result = fn()\r\n  if (!(result instanceof Promise)) {\r\n    return performance.now() - begin\r\n  }\r\n  return result.then(() => performance.now() - begin)\r\n}\r\n","/**\r\n * 轮询等待指定资源加载完毕再执行操作\r\n * 使用 Promises 实现，可以使用 ES7 的 {@async}/{@await} 调用\r\n * @param {Function} fn 判断必须的资源是否存在的方法\r\n * @param {Object} option 可配置项\r\n * @param {Number} [option.interval=100] 轮询间隔\r\n * @param {Number} [option.max=10] 最大轮询次数\r\n * @returns Promise 对象\r\n */\r\nexport const waitResource = (fn, { interval = 100, max = 10 } = {}) => {\r\n  let current = 0\r\n  return new Promise((resolve, reject) => {\r\n    const timer = setInterval(() => {\r\n      if (fn()) {\r\n        clearInterval(timer)\r\n        resolve()\r\n      }\r\n      current++\r\n      if (current >= max) {\r\n        clearInterval(timer)\r\n        reject(new Error('等待超时'))\r\n      }\r\n    }, interval)\r\n  })\r\n}\r\n","import { safeExec } from './safeExec'\r\n\r\n/**\r\n * 监视指定函数返回值的变化\r\n * @param {Function} fn 需要监视的函数\r\n * @param {Function} callback 回调函数\r\n * @param {Number} [interval=100] 每次检查的间隔时间，默认为 100ms\r\n * @returns {Function} 关闭这个监视函数\r\n */\r\nexport const watch = (fn, callback, interval = 100) => {\r\n  let oldVal = safeExec(fn)\r\n  const timer = setInterval(() => {\r\n    const newVal = safeExec(fn)\r\n    if (oldVal !== newVal) {\r\n      callback(newVal, oldVal)\r\n      oldVal = newVal\r\n    }\r\n  }, interval)\r\n  return () => clearInterval(timer)\r\n}\r\n","/**\r\n * 定义监听对象时的回调函数 doc\r\n * @callback WatchObjectCallback\r\n * @param {Object} target 代理的对象变化后的值\r\n * @param {String} k 变化的属性名\r\n * @param {Object} v 变化的属性值\r\n */\r\n\r\n/**\r\n * 深度监听指定对象属性的变化\r\n * 注：指定对象不能是原始类型，即不可变类型，而且对象本身的引用不能改变，最好使用 const 进行声明\r\n * @param {Object} object 需要监视的对象\r\n * @param {WatchObjectCallback} callback 当代理对象发生改变时的回调函数，回调函数有三个参数，分别是\r\n * @returns {Object} 返回源对象的一个代理\r\n */\r\nexport function watchObject (object, callback) {\r\n  const handler = {\r\n    get (target, k, receiver) {\r\n      try {\r\n        return new Proxy(target[k], handler)\r\n      } catch (err) {\r\n        return Reflect.get(target, k, receiver)\r\n      }\r\n    },\r\n    set (target, k, v, receiver) {\r\n      callback(target, k, v)\r\n      return Reflect.set(target, k, v, receiver)\r\n    },\r\n  }\r\n  return new Proxy(object, handler)\r\n}\r\n","/**\r\n * 字符串格式化\r\n *\r\n * @param {String} str 要进行格式化的值\r\n * @param {Object} args 格式化参数值，替换字符串中的 {} 的值\r\n * @returns {String} 替换完成的字符串\r\n * @deprecated 已废弃，请使用 ES6 模板字符串 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings\r\n */\r\nexport function format (str, args) {\r\n  if (!args) {\r\n    return str\r\n  }\r\n  return Object.keys(args).reduce(\r\n    (res, k) => res.replace(new RegExp(`{${k}}`, 'g'), args[k]),\r\n    str\r\n  )\r\n}\r\n","/**\r\n * 判断一个对象是否是无效的\r\n * 无效的值包含 null/undefined\r\n * @param {Object} object 任何一个对象\r\n * @returns {Boolean} 是否无效的\r\n */\r\nexport function isNullOrUndefined (object) {\r\n  return object === undefined || object === null\r\n}\r\n","import { isNullOrUndefined } from '../obj/isNullOrUndefined'\r\n/**\r\n * 判断是否为小数的正则表达式\r\n */\r\nconst FloatRule = new RegExp('^(-?\\\\d+)(.\\\\d+)?$')\r\n/**\r\n * 判断是否为整数的正则表达式\r\n */\r\nconst IntegerRule = new RegExp('^-?\\\\d+$')\r\n/**\r\n * 判断是否为邮箱的正则表达式\r\n */\r\nconst EmailRule = new RegExp(\r\n  '^\\\\w+((-\\\\w+)|(\\\\.\\\\w+))*\\\\@[A-Za-z0-9]+((\\\\.|-)[A-Za-z0-9]+)*\\\\.[A-Za-z]+$'\r\n)\r\n\r\n/**\r\n * 字符串校验\r\n */\r\nexport class StringValidator {\r\n  /**\r\n   * 判断一个字符串是否为空字符串\r\n   * @param {String} str 字符串\r\n   * @returns {Boolean} 是否为空字符串\r\n   */\r\n  isEmpty (str) {\r\n    return isNullOrUndefined(str) || str === ''\r\n  }\r\n  /**\r\n   * 判断一个字符串是否为空白的字符串\r\n   * @param {String} str 字符串\r\n   * @returns {Boolean} 是否为空字符串\r\n   */\r\n  isBlank (str) {\r\n    return stringValidator.isEmpty(str) || str.trim() === ''\r\n  }\r\n\r\n  /**\r\n   * 判断字符串是否位小数\r\n   * @param {String} str 需要进行判断的字符串\r\n   * @returns {Boolean} 是否为小数\r\n   */\r\n  isFloat (str) {\r\n    return FloatRule.test(str)\r\n  }\r\n\r\n  /**\r\n   * 判断字符串是否位整数\r\n   * @param {String} str 需要进行判断的字符串\r\n   * @returns {Boolean} 是否为小数\r\n   */\r\n  isInteger (str) {\r\n    return IntegerRule.test(str)\r\n  }\r\n  /**\r\n   * 判断邮箱的格式是否正确\r\n   * @param {String} str 邮箱字符串\r\n   * @returns {Boolean} 是否是邮箱\r\n   */\r\n  isEmail (str) {\r\n    return !stringValidator.isBlank(str) && EmailRule.test(str)\r\n  }\r\n}\r\n\r\n/**\r\n * 导出一个字符串校验的对象\r\n */\r\nexport const stringValidator = new StringValidator()\r\n","import { stringValidator } from './stringValidator'\r\n\r\n/**\r\n * 判断字符串是否位小数\r\n * @param {String} str 需要进行判断的字符串\r\n * @returns {Boolean} 是否为小数\r\n * @deprecated 已废弃，请使用 {@link stringValidator#isFloat}\r\n */\r\nexport function isFloat (str) {\r\n  return stringValidator.isFloat(str)\r\n}\r\n","import { stringValidator } from './stringValidator'\r\n\r\n/**\r\n * 判断字符串是否位整数\r\n * @param {String} str 需要进行判断的字符串\r\n * @returns {Boolean} 是否为小数\r\n * @deprecated 已废弃，请使用 {@link stringValidator#isInteger}\r\n */\r\nexport function isNumber (str) {\r\n  return stringValidator.isInteger(str)\r\n}\r\n","/**\r\n * 字符串安全的转换为大写\r\n * @param {String} str 字符串\r\n * @returns {String} 转换后得到的全大写字符串\r\n */\r\nexport function toUpperCase (str) {\r\n  if (!str || typeof str !== 'string') {\r\n    return str\r\n  }\r\n  return str.toUpperCase()\r\n}\r\n","/**\r\n * 将空白字符串转换为 null\r\n *\r\n * @param {String} str 将空字符串转换为 {@code null}\r\n * @returns {String} 可能为 {@code null}\r\n */\r\nexport function blankToNull (str) {\r\n  return !str || str.trim().length === 0 ? null : str\r\n}\r\n","import { isNullOrUndefined } from './isNullOrUndefined'\r\n\r\n/**\r\n * 获取对象中所有的属性，包括 ES6 新增的 Symbol 类型的属性\r\n * @param {Object} object 任何对象\r\n * @returns {Array.<String|Symbol>} 属性数组\r\n */\r\nexport function getObjectKeys (object) {\r\n  if (isNullOrUndefined(object)) {\r\n    return []\r\n  }\r\n  return [\r\n    ...Object.getOwnPropertyNames(object),\r\n    ...Object.getOwnPropertySymbols(object),\r\n  ]\r\n}\r\n","import { blankToNull } from './../string/blankToNull'\r\nimport { getObjectKeys } from './getObjectKeys'\r\n\r\n/**\r\n * 置空对象所有空白的属性\r\n *\r\n * @param {Object} obj 对象\r\n * @returns {Object} 将所有的空白属性全部转换为 null 的新对象\r\n */\r\nexport function blankToNullField (obj) {\r\n  const res = {}\r\n  getObjectKeys(obj).forEach(k => {\r\n    // @ts-ignore\r\n    const v = obj[k]\r\n    res[k] = typeof v === 'string' ? blankToNull(v) : v\r\n  })\r\n  return res\r\n}\r\n","import { getObjectKeys } from './getObjectKeys'\r\n\r\n/**\r\n * 将对象的所有属性置空\r\n * @param {Object} obj 需要置空属性的对象\r\n * @returns {Object} 返回一个新的对象\r\n */\r\nexport function emptyAllField (obj) {\r\n  return getObjectKeys(obj).reduce((res, k) => {\r\n    // @ts-ignore\r\n    res[k] = null\r\n    return res\r\n  }, {})\r\n}\r\n","import { getObjectKeys } from './getObjectKeys'\r\n\r\n/**\r\n * 排除对象中的指定字段\r\n * 注: 此处将获得一个浅拷贝对象\r\n * @param {Object} object 排除对象\r\n * @param {...String|Symbol|Number} fields 要排除的多个字段\r\n * @returns {Object} 排除完指定字段得到的新的对象\r\n */\r\nexport function excludeFields (object, ...fields) {\r\n  const set = new Set(fields)\r\n  return getObjectKeys(object).reduce((res, k) => {\r\n    if (!set.has(k)) {\r\n      // @ts-ignore\r\n      res[k] = object[k]\r\n    }\r\n    return res\r\n  }, {})\r\n}\r\n","/**\r\n * 将 Map 转换为 Object 对象\r\n * @param {Map} map Map 键值表\r\n * @returns {Object} 转换得到的 Object 对象\r\n */\r\nexport function mapToObject (map) {\r\n  const res = {}\r\n  // @ts-ignore\r\n  for (let [k, v] of map) {\r\n    res[k] = v\r\n  }\r\n  return res\r\n}\r\n","/**\r\n * 生成一个随机的数字\r\n * 如果没有参数，则会抛出异常\r\n * @param {Array.<Number>} args 参数列表，如果只有一个参数，则认为是最大值，最小值为 0。否则认为第一个是最小值，第二个是最大值，忽略剩余的参数\r\n * @returns {Number} 生成的随机整数\r\n */\r\nexport function randomInt (...args) {\r\n  let min\r\n  let max\r\n  if (args.length === 0) {\r\n    throw new Error('非法参数，必须指定最大值')\r\n  } else if (args.length === 1) {\r\n    min = 0\r\n    max = args[0]\r\n  } else if (args.length > 1) {\r\n    min = args[0]\r\n    max = args[1]\r\n  }\r\n  return min + Math.floor(Math.random() * (max - min))\r\n}\r\n","/**\r\n * 获取一年内的第多少星期\r\n * @deprecated 不推荐使用，请使用 {@link dateEnhance} 代替\r\n * @returns {Number}\r\n */\r\nexport function getYearWeek (date) {\r\n  /*\r\n    date1是当前日期\r\n    date2是当年第一天\r\n    d是当前日期是今年第多少天\r\n    用d + 当前年的第一天的周差距的和在除以7就是本年第几周\r\n    */\r\n  const nowTime = date.getTime()\r\n  const startTime = new Date(date.getFullYear(), 0, 1).getTime()\r\n  const difTime = nowTime - startTime\r\n  return Math.floor(difTime / (24 * 3600 * 1000) / 7)\r\n}\r\n","import { dateFormat } from './dateFormat'\r\n\r\n/**\r\n * 日期固定时间点\r\n * @class DateConstants\r\n */\r\nexport class DateConstants {\r\n  /**\r\n   * 获取指定日期一天的开始时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 一天的开始时间\r\n   */\r\n  dayStart (date = new Date()) {\r\n    return new Date(`${dateFormat(date, 'yyyy-MM-dd')}T00:00:00.000`)\r\n  }\r\n  /**\r\n   * 获取指定日期一天的结束时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 一天的结束时间\r\n   */\r\n  dayEnd (date = new Date()) {\r\n    return new Date(`${dateFormat(date, 'yyyy-MM-dd')}T23:59:59.999`)\r\n  }\r\n  /**\r\n   * 获取指定日期所在年份的新年开始时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 新年开始时间\r\n   */\r\n  yearStart (date = new Date()) {\r\n    return new Date(`${date.getFullYear()}-01-01T00:00:00.000`)\r\n  }\r\n  /**\r\n   * 获取指定日期所在年份的旧年结束时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 旧年结束时间\r\n   */\r\n  yearEnd (date = new Date()) {\r\n    return new Date(`${date.getFullYear()}-12-31T23:59:59.999`)\r\n  }\r\n}\r\n\r\n/**\r\n * 导出一个日期固定时间点的对象\r\n * @type {DateConstants}\r\n */\r\nexport const dateConstants = new DateConstants()\r\n","/**\r\n * 判断数字是否在指定区间之中\r\n * @param {Number} num 指定数字\r\n * @param {Number} min 最小值\r\n * @param {Number} max 最大值（不包含）\r\n */\r\nexport function isRange (num, min, max) {\r\n  return num >= min && num < max\r\n}\r\n","import { dateFormat } from './dateFormat'\r\n\r\n/**\r\n * 日期固定时间点\r\n * @class DateConstants\r\n */\r\nexport class DateConstants {\r\n  /**\r\n   * 获取指定日期一天的开始时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 一天的开始时间\r\n   */\r\n  dayStart (date = new Date()) {\r\n    return new Date(`${dateFormat(date, 'yyyy-MM-dd')}T00:00:00.000`)\r\n  }\r\n  /**\r\n   * 获取指定日期一天的结束时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 一天的结束时间\r\n   */\r\n  dayEnd (date = new Date()) {\r\n    return new Date(`${dateFormat(date, 'yyyy-MM-dd')}T23:59:59.999`)\r\n  }\r\n  /**\r\n   * 获取指定日期所在年份的新年开始时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 新年开始时间\r\n   */\r\n  yearStart (date = new Date()) {\r\n    return new Date(`${date.getFullYear()}-01-01T00:00:00.000`)\r\n  }\r\n  /**\r\n   * 获取指定日期所在年份的旧年结束时间\r\n   * @param {Date} [date=new Date()] 指定的时间，默认为当前日期\r\n   * @returns {Date} 旧年结束时间\r\n   */\r\n  yearEnd (date = new Date()) {\r\n    return new Date(`${date.getFullYear()}-12-31T23:59:59.999`)\r\n  }\r\n}\r\n\r\n/**\r\n * 导出一个日期固定时间点的对象\r\n * @type {DateConstants}\r\n */\r\nexport const dateConstants = new DateConstants()\r\n","import { isRange } from '../number/isRange'\r\nimport { dateConstants } from './DateConstants'\r\n\r\n/**\r\n * 一天标准的毫秒数\r\n */\r\nconst DAY_UNIT_TIME = 1000 * 60 * 60 * 24\r\n/**\r\n * 日期增强\r\n */\r\nexport class DateEnhance {\r\n  /**\r\n   * 构造函数\r\n   * @param {Date} date 要增强的日期\r\n   */\r\n  constructor (date) {\r\n    /**\r\n     * @field 要增强的日期\r\n     */\r\n    this.date = date\r\n  }\r\n  /**\r\n   * 获取到年份\r\n   * @returns {Number}\r\n   */\r\n  year () {\r\n    return this.date.getFullYear()\r\n  }\r\n  /**\r\n   * 获取月份\r\n   * @returns {Number}\r\n   * @deprecated 已废弃，请使用 {@link this#monthOfYear} 函数\r\n   */\r\n  month () {\r\n    return this.date.getMonth()\r\n  }\r\n  /**\r\n   * 获取今年的第几个月份\r\n   * 和 {@link this#month} 不同的是不再从 0 计算月份\r\n   */\r\n  monthOfYear () {\r\n    return this.date.getMonth() + 1\r\n  }\r\n  /**\r\n   * 获取一年内的第多少天\r\n   * 注: 这个天数指定的在第几天而非过去了多少天，例如 2018-01-10 的结果会是 10\r\n   * @returns {Number}\r\n   */\r\n  dayOfYear () {\r\n    return Math.ceil(\r\n      (this.date.getTime() - dateConstants.yearStart(this.date).getTime()) /\r\n        DAY_UNIT_TIME\r\n    )\r\n  }\r\n  /**\r\n   * 获取一个月内的第多少天\r\n   * 注: 这个天数指的是在第几天而非过去了多少天，例如 2018-01-10 的结果会是 10\r\n   * @returns {Number}\r\n   */\r\n  dayOfMonth () {\r\n    return this.date.getDate()\r\n  }\r\n  /**\r\n   * 获取一个星期内的第多少天\r\n   * @returns {Number}\r\n   */\r\n  dayOfWeek () {\r\n    return this.date.getDay()\r\n  }\r\n  /**\r\n   * 获取一年内的第多少星期\r\n   * 注: 这个星期指定的在第几天而非过去了多少天，例如 2018-01-10 的结果会是 10\r\n   * @returns {Number}\r\n   */\r\n  weekOfYear () {\r\n    return Math.ceil(this.dayOfYear() / 7)\r\n  }\r\n  /**\r\n   * 获取一个月内的第多少星期\r\n   * @returns {Number}\r\n   */\r\n  weekOfMonth () {\r\n    return Math.ceil(this.dayOfMonth() / 7)\r\n  }\r\n  /**\r\n   * 获取季度\r\n   * @returns {Number}\r\n   */\r\n  quarter () {\r\n    const month = this.month()\r\n    if (isRange(month, 0, 3)) {\r\n      return 1\r\n    } else if (isRange(month, 3, 6)) {\r\n      return 2\r\n    } else if (isRange(month, 6, 9)) {\r\n      return 3\r\n    } else {\r\n      return 4\r\n    }\r\n  }\r\n  /**\r\n   * 获取小时\r\n   * @returns {Number}\r\n   */\r\n  hour () {\r\n    return this.date.getHours()\r\n  }\r\n  /**\r\n   * 获取分钟\r\n   * @returns {Number}\r\n   */\r\n  minute () {\r\n    return this.date.getMinutes()\r\n  }\r\n  /**\r\n   * 获取秒\r\n   * @returns {Number}\r\n   */\r\n  second () {\r\n    return this.date.getSeconds()\r\n  }\r\n  /**\r\n   * 获取毫秒\r\n   * @returns {Number}\r\n   */\r\n  milliSecond () {\r\n    return this.date.getMilliseconds()\r\n  }\r\n}\r\n\r\n/**\r\n * 获取一个增强的日期\r\n * @param {Date} date 要增强的日期\r\n * @returns {DateEnhance} 增强日期\r\n */\r\nexport function dateEnhance (date) {\r\n  return new DateEnhance(date)\r\n}\r\n","/**\r\n * 时间日期间隔\r\n * @class DateBetween\r\n */\r\nexport class DateBetween {\r\n  /**\r\n   * 构造函数\r\n   * @param {Date} start 开始时间\r\n   * @param {Date} end 结束时间\r\n   */\r\n  constructor (start, end) {\r\n    /**\r\n     * @field start 开始时间\r\n     */\r\n    this.start = start\r\n    /**\r\n     * @field end 结束时间\r\n     */\r\n    this.end = end\r\n  }\r\n  /**\r\n   * 获取毫秒差值\r\n   * @returns {Number} 毫秒差值\r\n   */\r\n  milliSecond () {\r\n    return this.end.getTime() - this.start.getTime()\r\n  }\r\n  /**\r\n   * 获取秒差值\r\n   * @returns {Number} 秒差值\r\n   */\r\n  second () {\r\n    return Math.floor(this.milliSecond() / 1000)\r\n  }\r\n  /**\r\n   * 获取分钟差值\r\n   * @returns {Number} 分钟差值\r\n   */\r\n  minute () {\r\n    return Math.floor(this.second() / 60)\r\n  }\r\n  /**\r\n   * 获取小时差值\r\n   * @returns {Number} 小时差值\r\n   */\r\n  hour () {\r\n    return Math.floor(this.minute() / 60)\r\n  }\r\n  /**\r\n   * 获取天数差值\r\n   * @returns {Number} 天数差值\r\n   */\r\n  day () {\r\n    return Math.floor(this.hour() / 24)\r\n  }\r\n  /**\r\n   * 获取月份差值\r\n   * 注: 此处获取的差值是按月计算的，即 2018-12-31 => 2019-01-01 也被认为相差一个月\r\n   * @returns {Number} 月份差值\r\n   */\r\n  month () {\r\n    const year = this.year()\r\n    const month = this.end.getMonth() - this.start.getMonth()\r\n    return year * 12 + month\r\n  }\r\n  /**\r\n   * 获取年份差值\r\n   * 注: 此处获取的差值是按年计算的，即 2018-12-31 => 2019-01-01 也被认为相差一年\r\n   * @returns {Number} 年份差值\r\n   */\r\n  year () {\r\n    return this.end.getFullYear() - this.start.getFullYear()\r\n  }\r\n}\r\n\r\n/**\r\n * 获取两个时间的差值\r\n * @param {Date} start 开始时间\r\n * @param {Date} end 结束时间\r\n * @returns {DateBetween} 差值对象\r\n */\r\nexport function dateBetween (start, end) {\r\n  return new DateBetween(start, end)\r\n}\r\n","/**\r\n * 将指定函数包装为只调用一次\r\n * @param {Function} fn 需要包装的函数\r\n * @returns {Function} 包装后的函数\r\n */\r\nexport const once = fn => {\r\n  let flag = true\r\n  let cache\r\n  return new Proxy(fn, {\r\n    apply (target, thisArg, args) {\r\n      if (flag === false) {\r\n        return cache\r\n      }\r\n      flag = false\r\n      const result = Reflect.apply(target, thisArg, args)\r\n      // 如果是异步函数则返回异步的结果\r\n      if (result instanceof Promise) {\r\n        return result.then(res => {\r\n          cache = res\r\n          return res\r\n        })\r\n      }\r\n      cache = result\r\n      return cache\r\n    },\r\n  })\r\n}\r\n","/**\r\n * 包装一个函数为指定参数只执行一次的函数\r\n * @param {Function} fn 需要包装的函数\r\n * @param {Function} paramConverter 参数转换的函数，参数为需要包装函数的参数\r\n * @returns {Function} 需要被包装的函数\r\n */\r\nexport const onceOfSameParam = (\r\n  fn,\r\n  paramConverter = (...args) => JSON.stringify(args)\r\n) => {\r\n  const cacheMap = new Map()\r\n  return new Proxy(fn, {\r\n    apply (target, thisArg, args) {\r\n      const key = paramConverter(...args)\r\n      const old = cacheMap.get(key)\r\n      if (old !== undefined) {\r\n        return old\r\n      }\r\n      const res = Reflect.apply(target, thisArg, args)\r\n      if (res instanceof Promise) {\r\n        return res.then(res => {\r\n          cacheMap.set(key, res)\r\n          return res\r\n        })\r\n      }\r\n      cacheMap.set(key, res)\r\n      return res\r\n    },\r\n  })\r\n}\r\n","/**\r\n * 返回合理参数本身的函数\r\n * 1. 如果没有参数则返回 undefined\r\n * 2. 如果只有一个参数则返回参数本身\r\n * 3. 如果有两个以上的参数则返回参数列表\r\n * @param {...Object} args 任何对象\r\n * @returns {undefined|Object|Array.<Object>} 传入的参数\r\n */\r\nexport function returnReasonableItself (...args) {\r\n  const len = args.length\r\n  if (len === 0) {\r\n    return\r\n  }\r\n  if (len === 1) {\r\n    return args[0]\r\n  }\r\n  return args\r\n}\r\n","import { returnItself } from './../function/returnItself'\r\n\r\n/**\r\n * 从数组中移除指定的元素\r\n * 注: 时间复杂度为 1~3On\r\n * @param {Array} arr 需要被过滤的数组\r\n * @param {Array} deleteItems 要过滤的元素数组\r\n * @param {Function} [kFn=returnItself] 每个元素的唯一键函数\r\n */\r\nexport function filterItems (arr, deleteItems, kFn = returnItself) {\r\n  // @ts-ignore\r\n  const kSet = new Set(deleteItems.map(kFn))\r\n  return arr.filter((v, ...args) => !kSet.has(kFn(v, ...args)))\r\n}\r\n","import { returnItself } from '../function/returnItself'\r\n\r\n/**\r\n * 数组之间的差异结果类\r\n * @class ArrayDiff\r\n */\r\nexport class ArrayDiff {\r\n  /**\r\n   * 构造函数\r\n   * @param {Array} left 第一个数组独有的元素列表\r\n   * @param {Array} right 第二个数组独有的元素列表\r\n   * @param {Array} common 两个数组共有的元素列表。注意: 这里的元素实质上是从第一个集合获取的\r\n   */\r\n  constructor (left, right, common) {\r\n    /**\r\n     * @field 第一个数组独有的元素列表\r\n     */\r\n    this.left = left\r\n    /**\r\n     * @field 第二个数组独有的元素列表\r\n     */\r\n    this.right = right\r\n    /**\r\n     * @field 两个数组共有的元素列表\r\n     */\r\n    this.common = common\r\n  }\r\n}\r\n\r\n/**\r\n * 比较两个数组的差异\r\n * @param {Array} thanArr 第一个数组\r\n * @param {Array} thatArr 第二个数组\r\n * @param {Function} [kFn=returnItself] 每个元素的唯一标识产生函数\r\n * @returns {ArrayDiff} 比较的差异结果\r\n */\r\nexport function arrayDiffBy (thanArr, thatArr, kFn = returnItself) {\r\n  // @ts-ignore\r\n  const kThanSet = new Set(thanArr.map(kFn))\r\n  // @ts-ignore\r\n  const kThatSet = new Set(thatArr.map(kFn))\r\n  const left = thanArr.filter((v, ...args) => !kThatSet.has(kFn(v, ...args)))\r\n  const right = thatArr.filter((v, ...args) => !kThanSet.has(kFn(v, ...args)))\r\n  // @ts-ignore\r\n  const kLeftSet = new Set(left.map(kFn))\r\n  const common = thanArr.filter((v, ...args) => !kLeftSet.has(kFn(v, ...args)))\r\n  return new ArrayDiff(left, right, common)\r\n}\r\n","import { once } from '../function/once'\r\n/**\r\n * 使用 Generator 实现一个从 0 开始的自增序列\r\n */\r\nfunction * autoIncrementGenerator () {\r\n  for (let i = 0; ; i++) {\r\n    /**\r\n     * @returns {Number} 每次获取都返回循环中的当前迭代变量，然后暂停于此处\r\n     */\r\n    yield i\r\n  }\r\n}\r\n/**\r\n * 包装 {@link autoIncrementGenerator} 为只能调用一次的函数\r\n */\r\nconst generator = once(autoIncrementGenerator)\r\n\r\n/**\r\n * 获取自增长序列的最新值\r\n * @returns {Number} 最新值\r\n */\r\nexport function autoIncrement () {\r\n  return generator().next().value\r\n}\r\n","import { onceOfSameParam } from '../function/onceOfSameParam'\r\nimport { stringValidator } from './stringValidator'\r\nimport { toLowerCase } from './toLowerCase'\r\nimport { toUpperCase } from './toUpperCase'\r\n\r\n/**\r\n * 转换接口\r\n * @interface\r\n */\r\nexport class IConverter {\r\n  /**\r\n   * 将字符串解析为字符串列表\r\n   *\r\n   * @param {String} str 字符串\r\n   * @return {Array.<String>} 字符串列表\r\n   * @abstract\r\n   */\r\n  from (str) {\r\n    throw new Error('子类必须重写 from 函数')\r\n  }\r\n\r\n  /**\r\n   * 将字符串列表构造为字符串\r\n   *\r\n   * @param {Array.<String>} list 字符串列表\r\n   * @return {String} 字符串\r\n   * @abstract\r\n   */\r\n  to (list) {\r\n    throw new Error('子类必须重写 to 函数')\r\n  }\r\n}\r\n\r\n/**\r\n * 驼峰风格解析\r\n */\r\nexport class CamelOrPascalFrom extends IConverter {\r\n  /**\r\n   * 将字符串解析为字符串列表\r\n   *\r\n   * @param {String} str 字符串\r\n   * @return {Array.<String>} 字符串列表\r\n   * @override\r\n   */\r\n  from (str) {\r\n    const result = []\r\n    let len = str.length\r\n    let old = 0\r\n    for (let i = 0; i < len; i++) {\r\n      const c = str.charAt(i)\r\n      if (c >= 'A' && c <= 'Z') {\r\n        if (i !== 0) {\r\n          result.push(str.substring(old, i))\r\n        }\r\n        old = i\r\n      }\r\n    }\r\n    if (old !== str.length) {\r\n      result.push(str.substring(old, str.length))\r\n    }\r\n    return result\r\n  }\r\n}\r\n\r\n/**\r\n * 小写开头的驼峰转换器\r\n *\r\n */\r\nexport class CamelConverter extends CamelOrPascalFrom {\r\n  /**\r\n   * 将字符串列表构造为字符串\r\n   *\r\n   * @param {Array.<String>} list 字符串列表\r\n   * @return {String} 字符串\r\n   * @override\r\n   */\r\n  to (list) {\r\n    return list.reduce((res, s, i) => {\r\n      const str = toLowerCase(s)\r\n      return (res +=\r\n        (i === 0 ? toLowerCase : toUpperCase)(str.substring(0, 1)) +\r\n        str.substring(1))\r\n    }, '')\r\n  }\r\n}\r\n\r\n/**\r\n * 大写开头的驼峰转换器\r\n */\r\nexport class PascalConverter extends CamelOrPascalFrom {\r\n  /**\r\n   * 将字符串列表构造为字符串\r\n   *\r\n   * @param {Array.<String>} list 字符串列表\r\n   * @return {String} 字符串\r\n   * @override\r\n   */\r\n  to (list) {\r\n    return list.reduce((res, s) => {\r\n      const str = toLowerCase(s)\r\n      return (res += toUpperCase(str.substring(0, 1)) + str.substring(1))\r\n    }, '')\r\n  }\r\n}\r\n/**\r\n * 下划线风格解析\r\n */\r\nexport class SnakeOrScreamingSnakeFrom extends IConverter {\r\n  /**\r\n   * 将字符串解析为字符串列表\r\n   *\r\n   * @param {String} str 字符串\r\n   * @return {Array.<String>} 字符串列表\r\n   * @override\r\n   */\r\n  from (str) {\r\n    return str.split('_')\r\n  }\r\n}\r\n/**\r\n * 小写下划线的转换器\r\n */\r\nexport class SnakeConverter extends SnakeOrScreamingSnakeFrom {\r\n  /**\r\n   * 将字符串列表构造为字符串\r\n   *\r\n   * @param {Array.<String>} list 字符串列表\r\n   * @return {String} 字符串\r\n   * @override\r\n   */\r\n  to (list) {\r\n    return list.map(toLowerCase).join('_')\r\n  }\r\n}\r\n/**\r\n * 大写下划线的转换器\r\n */\r\nexport class ScreamingSnakeConverter extends SnakeOrScreamingSnakeFrom {\r\n  /**\r\n   * 将字符串列表构造为字符串\r\n   *\r\n   * @param {Array.<String>} list 字符串列表\r\n   * @return {String} 字符串\r\n   * @override\r\n   */\r\n  to (list) {\r\n    return list.map(toUpperCase).join('_')\r\n  }\r\n}\r\n/**\r\n * @enum {Symbol} 字符串风格常量对象\r\n */\r\nexport const stringStyleType = {\r\n  /**\r\n   * 小写驼峰\r\n   */\r\n  Camel: Symbol(1),\r\n  /**\r\n   * 大写驼峰\r\n   */\r\n  Pascal: Symbol(2),\r\n  /**\r\n   * 小写下划线\r\n   */\r\n  Snake: Symbol(3),\r\n  /**\r\n   * 大写下划线\r\n   */\r\n  ScreamingSnake: Symbol(4),\r\n}\r\n\r\n/**\r\n * 转换器工厂\r\n */\r\nexport class ConverterFactory {\r\n  /**\r\n   * 获取一个转换器实例\r\n   *\r\n   * @param {Symbol} styleType 转换风格，使用了 {@link stringStyleType} 定义的常量对象\r\n   * @return {IConverter} 转换器对象\r\n   * @throws 如果获取未定义过的转换器，则会抛出异常\r\n   */\r\n  static getInstance (styleType) {\r\n    switch (styleType) {\r\n      case stringStyleType.Camel:\r\n        return new CamelConverter()\r\n      case stringStyleType.Pascal:\r\n        return new PascalConverter()\r\n      case stringStyleType.Snake:\r\n        return new SnakeConverter()\r\n      case stringStyleType.ScreamingSnake:\r\n        return new ScreamingSnakeConverter()\r\n      default:\r\n        throw new Error('No corresponding converter found')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 字符串风格转换器\r\n * 请不要直接使用构造函数创建，而是用 {@link StringStyleUtil.getConverter} 来获得一个转换器\r\n * @private\r\n */\r\nexport class StringStyleConverter {\r\n  /**\r\n   * 构造一个字符串任意风格转换器\r\n   * @param {Symbol} from 转换字符串的风格\r\n   * @param {Symbol} to 需要转换的风格\r\n   * @private\r\n   */\r\n  constructor (from, to) {\r\n    /**\r\n     * @field 解析字符串风格的转换器\r\n     * @type {IConverter}\r\n     * @private\r\n     */\r\n    this.fromConverter = ConverterFactory.getInstance(from)\r\n    /**\r\n     * @field 构造字符串风格的转换器\r\n     * @type {IConverter}\r\n     * @private\r\n     */\r\n    this.toConverter = ConverterFactory.getInstance(to)\r\n  }\r\n\r\n  /**\r\n   * 转换字符串的风格\r\n   *\r\n   * @param {String} str 要转换的字符串\r\n   * @return {String} 转换得到的字符串\r\n   */\r\n  convert (str) {\r\n    if (stringValidator.isEmpty(str)) {\r\n      return str\r\n    }\r\n    return this.toConverter.to(this.fromConverter.from(str))\r\n  }\r\n}\r\n\r\n/**\r\n * 包装获取字符串风格转换器\r\n * 此处采用了单例模式，每种转换器只会有一个\r\n *\r\n * @param {stringStyleType} from 解析风格\r\n * @param {stringStyleType} to 转换风格\r\n * @return {StringStyleConverter} 转换器的实例\r\n */\r\nconst _getConverter = onceOfSameParam(\r\n  /**\r\n   * @param {stringStyleType} from 解析风格\r\n   * @param {stringStyleType} to 转换风格\r\n   * @return {StringStyleConverter} 转换器的实例\r\n   */\r\n  (from, to) => new StringStyleConverter(from, to),\r\n  /**\r\n   * 根据参数生成唯一标识\r\n   * @param {stringStyleType} from 解析风格\r\n   * @param {stringStyleType} to 转换风格\r\n   * @return {String} 唯一参数标识字符串\r\n   */\r\n  (from, to) => from.toString() + to.toString()\r\n)\r\n\r\n/**\r\n * 字符串风格转换工具类\r\n */\r\nexport class StringStyleUtil {\r\n  /**\r\n   * 获取一个转换器的实例\r\n   * 该函数获取的转换器可以任意复用，请优先使用函数\r\n   * @param {stringStyleType} from 解析风格\r\n   * @param {stringStyleType} to 转换风格\r\n   * @return {StringStyleConverter} 转换器的实例\r\n   */\r\n  static getConverter (from, to) {\r\n    return _getConverter(from, to)\r\n  }\r\n  /**\r\n   * 直接转换字符串的风格\r\n   * 请优先使用可以复用的 {@link StringStyleUtil.getConverter} 函数\r\n   * @param {stringStyleType} from 解析风格\r\n   * @param {stringStyleType} to 转换风格\r\n   * @param {String} str 要转换的字符串\r\n   * @return {String} 转换得到的字符串\r\n   */\r\n  static convert (from, to, str) {\r\n    return StringStyleUtil.getConverter(from, to).convert(str)\r\n  }\r\n}\r\n","import { getObjectKeys } from './getObjectKeys'\r\n\r\n/**\r\n * 获取对象中所有的属性值，包括 ES6 新增的 Symbol 类型的属性\r\n * @param {Object} object 任何对象\r\n * @returns {Array.<String|Symbol>} 属性值数组\r\n */\r\nexport function getObjectValues (object) {\r\n  // @ts-ignore\r\n  return getObjectKeys(object).map(k => object[k])\r\n}\r\n","import { isNullOrUndefined } from './isNullOrUndefined'\r\nimport { getObjectValues } from './getObjectValues'\r\n\r\n/**\r\n * 递归使对象不可变\r\n * @param {Object} obj 任何非空对象\r\n * @returns {Object} 新的不可变对象\r\n */\r\nexport function deepFreeze (obj) {\r\n  if (isNullOrUndefined(obj)) {\r\n    return null\r\n  }\r\n  // 数组和对象分别处理\r\n  if (obj instanceof Array) {\r\n    obj.forEach(v => {\r\n      if (typeof v === 'object') {\r\n        deepFreeze(v)\r\n      }\r\n    })\r\n  } else if (obj instanceof Object) {\r\n    getObjectValues(obj).forEach(v => {\r\n      if (typeof v === 'object') {\r\n        deepFreeze(v)\r\n      }\r\n    })\r\n  }\r\n  return Object.freeze(obj)\r\n}\r\n","/**\r\n * 包装对象，使其成为可以任意深度调用而不会出现 undefined 调用的问题\r\n * 注意: 该函数不能进行递归调用（{@link JSON.stringfy}），一定会造成堆栈溢出的问题（RangeError: Maximum call stack size exceeded）\r\n * @param {Object} object 任意一个 Object 对象\r\n * @returns {Object} 包装后的对象\r\n */\r\nexport function deepProxy (object) {\r\n  const handler = {\r\n    get (target, k) {\r\n      Reflect.set(\r\n        target,\r\n        k,\r\n        Reflect.has(target, k) ? Reflect.get(target, k) : {}\r\n      )\r\n      const v = Reflect.get(target, k)\r\n      if (typeof v === 'object') {\r\n        return new Proxy(v, handler)\r\n      }\r\n      return v\r\n    },\r\n  }\r\n  return new Proxy(object, handler)\r\n}\r\n","/**\r\n * 将函数包装为柯里化函数\r\n * 注: 该函数模仿了 Lodash 的 curry 函数\r\n * @param {Function} fn 需要包装的函数\r\n * @param  {...any} args 应用的部分参数\r\n * @returns {Function} 包装后的函数\r\n */\r\nexport const curry = (fn, ...args) => {\r\n  const realArgs = args.filter(arg => arg !== curry._)\r\n  if (realArgs.length >= fn.length) {\r\n    return fn(...realArgs)\r\n  }\r\n\r\n  function innerFn (...otherArgs) {\r\n    // 记录需要移除补到前面的参数\r\n    const removeIndexSet = new Set()\r\n    let i = 0\r\n    const newArgs = args.map(arg => {\r\n      if (\r\n        arg !== curry._ ||\r\n        otherArgs[i] === undefined ||\r\n        otherArgs[i] === curry._\r\n      ) {\r\n        return arg\r\n      }\r\n      removeIndexSet.add(i)\r\n      // 每次补偿前面的 curry._ 参数计数器 +1\r\n      return otherArgs[i++]\r\n    })\r\n    const newOtherArgs = otherArgs.filter((_v, i) => !removeIndexSet.has(i))\r\n    return curry(fn, ...newArgs, ...newOtherArgs)\r\n  }\r\n\r\n  // 自定义 toString 函数便于调试\r\n  innerFn.toString = () =>\r\n    `name: ${fn.name}, args: [${args.map(o => o.toString()).join(', ')}]`\r\n  innerFn._curry = true\r\n\r\n  return innerFn\r\n}\r\n\r\n/**\r\n * 柯里化的占位符，需要应用后面的参数时使用\r\n * 例如 {@link curry(fn)(curry._, 1)} 意味着函数 fn 的第二个参数将被确定为 1\r\n */\r\ncurry._ = Symbol('_')\r\n","import { groupBy } from './groupBy'\r\nimport { returnItself } from '../function/returnItself'\r\n\r\n/**\r\n * 快速根据指定函数对数组进行排序\r\n * 注: 使用递归实现，对于超大数组（其实前端的数组不可能特别大吧？#笑）可能造成堆栈溢出\r\n * @param {Array} arr 需要排序的数组\r\n * @param {Function} [kFn=returnItself] 对数组中每个元素都产生可比较的值的函数，默认返回自身进行比较\r\n * @returns {Array} 排序后的新数组\r\n */\r\nexport function sortBy (arr, kFn = returnItself) {\r\n  // 边界条件，如果传入数组的值\r\n  if (arr.length <= 1) {\r\n    return arr\r\n  }\r\n  // 根据中间值对数组分治为两个数组\r\n  const medianIndex = Math.floor(arr.length / 2)\r\n  const newArr = arr.slice()\r\n  const median = newArr.splice(medianIndex, 1)[0]\r\n  const medianValue = kFn(median, medianIndex, arr)\r\n  const map = groupBy(\r\n    newArr,\r\n    (item, ...args) => kFn(item, ...args) < medianValue\r\n  )\r\n  // 对两个数组分别进行递归排序\r\n  return [\r\n    ...sortBy(map.get(true) || [], kFn),\r\n    median,\r\n    ...sortBy(map.get(false) || [], kFn),\r\n  ]\r\n}\r\n","import { stringValidator } from './stringValidator'\r\n\r\n/**\r\n * 判断一个字符串是否为空字符串\r\n * @param {String} str 字符串\r\n * @returns {Boolean} 是否为空字符串\r\n * @deprecated 已废弃，请使用 {@link stringValidator#isEmpty}\r\n */\r\nexport function isEmpty (str) {\r\n  return stringValidator.isEmpty(str)\r\n}\r\n","import { dateFormat } from './dateFormat'\r\nimport { dateParse } from './dateParse'\r\nimport { isNullOrUndefined } from '../obj/isNullOrUndefined'\r\nimport { isEmpty } from '../string/isEmpty'\r\n\r\n/**\r\n * 日期格式化器\r\n * 包含格式化为字符串和解析字符串为日期的函数\r\n */\r\nexport class DateFormatter {\r\n  /**\r\n   * 构造函数\r\n   * @param {String} fmt 日期时间格式\r\n   */\r\n  constructor (fmt) {\r\n    /**\r\n     * @field 日期时间格式\r\n     */\r\n    this.fmt = fmt\r\n  }\r\n  /**\r\n   * 格式化\r\n   * @param {Date} date 需要格式化的日期\r\n   * @returns {String} 格式化的字符串\r\n   */\r\n  format (date) {\r\n    if (isNullOrUndefined(date)) {\r\n      return ''\r\n    }\r\n    return dateFormat(date, this.fmt)\r\n  }\r\n  /**\r\n   * 解析\r\n   * @param {String} str 字符串\r\n   * @returns {Date} 解析得到的日期\r\n   */\r\n  parse (str) {\r\n    if (isEmpty(str)) {\r\n      return null\r\n    }\r\n    return dateParse(str, this.fmt)\r\n  }\r\n  /**\r\n   * 将日期时间字符串转换为前端指定格式的字符串\r\n   * 主要适用场景是前端接收到后端的日期时间一般是一个字符串，然而需要自定义格式的时候还必须先创建 {@link Date} 对象才能格式化，略微繁琐，故使用该函数\r\n   * @param {String} str 字符串\r\n   * @param {String} [parseFmt=undefined] 解析的日期时间格式。默认直接使用 {@link new Date()} 创建\r\n   * @returns {String} 转换后得到的字符串\r\n   */\r\n  strFormat (str, parseFmt) {\r\n    if (isEmpty(str)) {\r\n      return ''\r\n    }\r\n    const date = parseFmt ? dateParse(str, parseFmt) : new Date(str)\r\n    return dateFormat(date, this.fmt)\r\n  }\r\n}\r\n\r\n/**\r\n * 日期格式化器\r\n */\r\nDateFormatter.dateFormatter = new DateFormatter('yyyy-MM-dd')\r\n/**\r\n * 时间格式化器\r\n */\r\nDateFormatter.timeFormatter = new DateFormatter('hh:mm:ss')\r\n/**\r\n * 日期时间格式化器\r\n */\r\nDateFormatter.dateTimeFormatter = new DateFormatter('yyyy-MM-dd hh:mm:ss')\r\n","import { curry } from './curry'\r\n\r\n/**\r\n * 连接两个函数并自动柯里化\r\n * @param {Function} fn1 第一个函数\r\n * @param {Function} fn2 第二个函数\r\n * @returns {Function} 连接后的函数\r\n */\r\nconst _compose = (fn1, fn2) => {\r\n  return function (...args) {\r\n    const res = curry(fn1, ...args)\r\n    // 如果这个函数的参数不足，则返回它\r\n    // @ts-ignore\r\n    if (res instanceof Function && res._curry === true) {\r\n      return _compose(res, fn2)\r\n    }\r\n    return curry(fn2, res)\r\n  }\r\n}\r\n\r\n/**\r\n * 将多个函数组合起来\r\n * 前面函数的返回值将变成后面函数的第一个参数，如果到了最后一个函数执行完成，则直接返回\r\n * 该函数是自动柯里化，将对所有传入的函数进行柯里化处理\r\n * @param  {...Function} fns 多个需要连接函数\r\n * @returns {Function} 连接后的柯里化函数\r\n */\r\nexport const compose = (...fns) =>\r\n  // TODO 反向连接就可以了?\r\n  fns.reduceRight((fn1, fn2) => _compose(fn2, fn1))\r\n","import { excludeFields } from './excludeFields'\r\nimport { getObjectKeys } from './getObjectKeys'\r\n\r\n/**\r\n * 递归排除对象中的指定字段\r\n * @param {Object} object 需要排除的对象\r\n * @param  {...Object} fields 需要排除的字段\r\n */\r\nexport function excludeFieldsDeep (object, ...fields) {\r\n  const res =\r\n    object instanceof Array ? object : excludeFields(object, ...fields)\r\n  getObjectKeys(object).forEach(k => {\r\n    // @ts-ignore\r\n    const v = res[k]\r\n    if (v instanceof Object) {\r\n      // @ts-ignore\r\n      object[k] = excludeFieldsDeep(v, ...fields)\r\n    }\r\n  })\r\n  return res\r\n}\r\n","import { isNullOrUndefined } from '../obj/isNullOrUndefined'\r\n\r\n/**\r\n * 将任意对象转换为 String\r\n * 主要避免原生 Object toString 遇到某些空值的时候抛异常的问题\r\n * @param {Object} object 任意对象\r\n * @returns {String} 字符串\r\n */\r\nexport const toString = object => {\r\n  if (isNullOrUndefined(object)) {\r\n    return ''\r\n  }\r\n  if (object instanceof Date) {\r\n    return object.toISOString()\r\n  }\r\n  return object.toString()\r\n}\r\n","/**\r\n * 无限的超时时间\r\n * TODO 此处暂时使用字符串作为一种折衷方法，因为 Symbol 无法被序列化为 JSON，反向序列化也是不可能的\r\n */\r\nexport const TimeoutInfinite = Symbol('TimoutInfinite').toString()\r\n\r\n/**\r\n * 缓存选项\r\n */\r\nexport class CacheOption {\r\n  /**\r\n   * 构造函数\r\n   * @param {Object} options 缓存选项对象\r\n   * @param {Number|Symbol|String} [options.timeout] 超时时间，以毫秒为单位\r\n   * @param {Number} [options.timeStart] 缓存开始时间\r\n   * @param {Function} [options.serialize] 缓存序列化\r\n   * @param {Function} [options.deserialize] 缓存反序列化\r\n   */\r\n  constructor ({ timeout, timeStart, serialize, deserialize } = {}) {\r\n    /**\r\n     * @field 超时时间，以毫秒为单位\r\n     */\r\n    this.timeStart = timeStart\r\n    /**\r\n     * @field 缓存开始时间\r\n     */\r\n    this.timeout = timeout\r\n    /**\r\n     * @field 缓存序列化\r\n     */\r\n    this.serialize = serialize\r\n    /**\r\n     * @field 缓存反序列化\r\n     */\r\n    this.deserialize = deserialize\r\n  }\r\n}\r\n","import { getObjectKeys } from './getObjectKeys'\r\n\r\n/**\r\n * 获取对象中所有的属性及对应的值，包括 ES6 新增的 Symbol 类型的属性\r\n * @param {Object} object 任何对象\r\n * @returns {Array.<String|Symbol>} 属性及其对应值的二维数组\r\n */\r\nexport function getObjectEntries (object) {\r\n  // @ts-ignore\r\n  return getObjectKeys(object).map(k => [k, object[k]])\r\n}\r\n","import { flatMap } from '../array/flatMap'\r\nimport { isNullOrUndefined } from './isNullOrUndefined'\r\nimport { getObjectEntries } from './getObjectEntries'\r\n\r\n/**\r\n * 合并多个对象的属性\r\n * 1. 该合并的方式为浅层合并，只会合并一层的对象\r\n * 2. 默认忽略值为 undefined/null 的属性\r\n * @param  {...Object} objects 任意数量的对象\r\n * @returns {Object} 合并后的对象\r\n */\r\nexport function assign (...objects) {\r\n  return flatMap(objects, object =>\r\n    isNullOrUndefined(object) ? [] : getObjectEntries(object)\r\n  ).reduce((res, [k, v]) => {\r\n    if (isNullOrUndefined(v)) {\r\n      return res\r\n    }\r\n    res[k] = v\r\n    return res\r\n  }, {})\r\n}\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { CacheOption, TimeoutInfinite } from './CacheOption'\r\nimport { assign } from '../obj/assign'\r\n\r\n/**\r\n * 缓存接口\r\n * 功能\r\n * 1. add 增加。如果不存在则添加，否则忽略\r\n * 2. del 删除。如果存在则删除，否则忽略\r\n * 3. set 修改。如果存在则设置，否则忽略\r\n * 4. get 根据 key 获取。如果存在则获取，否则忽略\r\n * 5. touch 根据 key 获取并刷新超时时间\r\n * 6. find 根据谓词查询 key\r\n * 7. list 根据谓词查询 key 获得列表\r\n *\r\n * @interface\r\n */\r\nexport class ICache {\r\n  /**\r\n   * 全局缓存选项\r\n   * @param {CacheOption} cacheOption 缓存选项\r\n   */\r\n  constructor (cacheOption) {\r\n    /**\r\n     * @field 缓存选项\r\n     */\r\n    this.cacheOption = assign(\r\n      new CacheOption({\r\n        timeout: TimeoutInfinite,\r\n        serialize: JSON.stringify,\r\n        deserialize: JSON.parse,\r\n      }),\r\n      cacheOption\r\n    )\r\n  }\r\n  /**\r\n   * 根据 key + value 添加\r\n   * 如果不存在则添加，否则忽略\r\n   * @param {String} key 缓存的 key\r\n   * @param {Object} val 缓存的 value\r\n   * @param {CacheOption} cacheOption 缓存的选项\r\n   * @abstract\r\n   */\r\n  add (key, val, cacheOption) {}\r\n  /**\r\n   * 根据指定的 key 删除\r\n   * 如果存在则删除，否则忽略\r\n   * @param {String} key 删除的 key\r\n   * @abstract\r\n   */\r\n  del (key) {}\r\n  /**\r\n   * 根据指定的 key 修改\r\n   * 不管是否存在都会设置\r\n   * @param {String} key 修改的 key\r\n   * @param {Object} val 修改的 value\r\n   * @param {CacheOption} cacheOption 修改的选项\r\n   * @abstract\r\n   */\r\n  set (key, val, cacheOption) {}\r\n  /**\r\n   * 根据 key 获取\r\n   * 如果存在则获取，否则忽略\r\n   * @param {String} key 指定的 key\r\n   * @param {CacheOption} cacheOption 获取的选项\r\n   * @returns {Object} 获取到的缓存值\r\n   * @abstract\r\n   */\r\n  get (key, cacheOption) {}\r\n  /**\r\n   * 根据 key 获取并刷新超时时间\r\n   * @param {String} key 指定的 key\r\n   * @param {CacheOption} cacheOption 获取的选项\r\n   * @returns {Object} 获取到的缓存值\r\n   * @abstract\r\n   */\r\n  touch (key, cacheOption) {}\r\n}\r\n","// eslint-disable-next-line no-unused-vars\r\nimport { CacheOption } from './CacheOption'\r\n\r\n/**\r\n * 缓存的值\r\n */\r\nexport class CacheVal {\r\n  /**\r\n   * 构造函数\r\n   * @param {Object} options 缓存值对象\r\n   * @param {String} options.key 缓存的键原始值\r\n   * @param {Object} options.val 缓存的值\r\n   * @param {CacheOption} options.cacheOption 缓存的选项\r\n   */\r\n  constructor ({ key, val, cacheOption }) {\r\n    /**\r\n     * @field 缓存的键原始值\r\n     */\r\n    this.key = key\r\n    /**\r\n     * @field 缓存的值\r\n     */\r\n    this.val = val\r\n    /**\r\n     * @field 缓存的选项\r\n     */\r\n    this.cacheOption = cacheOption\r\n  }\r\n}\r\n","import { ICache } from './ICache'\r\nimport { CacheVal } from './CacheVal'\r\nimport { CacheOption, TimeoutInfinite } from './CacheOption'\r\nimport { assign } from '../obj/assign'\r\nimport { safeExec } from '../function/safeExec'\r\n\r\n/**\r\n * 使用 LocalStorage 实现的缓存\r\n */\r\nexport class LocalStorageCache extends ICache {\r\n  /**\r\n   * 构造函数\r\n   * @param {CacheOption} [cacheOption] 全局缓存选项\r\n   */\r\n  constructor (cacheOption) {\r\n    super(cacheOption)\r\n    /**\r\n     * 缓存对象，默认使用 localStorage\r\n     */\r\n    this.localStorage = window.localStorage\r\n  }\r\n  /**\r\n   * 根据 key + value 添加\r\n   * 如果不存在则添加，否则忽略\r\n   * @param {String} key 缓存的 key\r\n   * @param {Object} val 缓存的 value\r\n   * @param {CacheOption} [cacheOption] 缓存的选项，默认为无限时间\r\n   * @override\r\n   */\r\n  add (key, val, cacheOption) {\r\n    const result = this.get(\r\n      key,\r\n      assign({ timeStart: Date.now() }, cacheOption)\r\n    )\r\n    if (result !== null) {\r\n      return\r\n    }\r\n    this.set(key, val, cacheOption)\r\n  }\r\n  /**\r\n   * 根据指定的 key 删除\r\n   * 如果存在则删除，否则忽略\r\n   * @param {String} key 删除的 key\r\n   * @override\r\n   */\r\n  del (key) {\r\n    this.localStorage.removeItem(key)\r\n  }\r\n  /**\r\n   * 根据指定的 key 修改\r\n   * 不管是否存在都会设置\r\n   * @param {String} key 修改的 key\r\n   * @param {Object} val 修改的 value\r\n   * @param {CacheOption} [cacheOption] 修改的选项\r\n   * @override\r\n   */\r\n  set (key, val, cacheOption = new CacheOption()) {\r\n    const option = assign(\r\n      this.cacheOption,\r\n      { timeStart: Date.now() },\r\n      cacheOption\r\n    )\r\n    this.localStorage.setItem(\r\n      key,\r\n      JSON.stringify(\r\n        new CacheVal({\r\n          key,\r\n          val: option.serialize(val),\r\n          cacheOption: option,\r\n        })\r\n      )\r\n    )\r\n  }\r\n  /**\r\n   * 根据 key 获取\r\n   * 如果存在则获取，否则忽略\r\n   * @param {String} key 指定的 key\r\n   * @param {CacheOption} cacheOption 获取的选项\r\n   * @returns {Object} 获取到的缓存值\r\n   * @override\r\n   */\r\n  get (key, cacheOption = new CacheOption()) {\r\n    const str = this.localStorage.getItem(key)\r\n    const cacheVal = safeExec(JSON.parse, null, str)\r\n    if (cacheVal === null) {\r\n      return null\r\n    }\r\n    const { timeStart, timeout, deserialize } = assign(\r\n      this.cacheOption,\r\n      cacheVal.cacheOption,\r\n      cacheOption\r\n    )\r\n    // 如果超时则删除并返回 null\r\n    if (timeout !== TimeoutInfinite && Date.now() - timeStart > timeout) {\r\n      this.del(key)\r\n      return null\r\n    }\r\n    try {\r\n      return deserialize(cacheVal.val)\r\n    } catch (e) {\r\n      this.del(key)\r\n      return null\r\n    }\r\n  }\r\n  /**\r\n   * 根据 key 获取并刷新超时时间\r\n   * @param {String} key 指定的 key\r\n   * @param {CacheOption} cacheOption 获取的选项\r\n   * @returns {Object} 获取到的缓存值\r\n   * @override\r\n   */\r\n  touch (key, cacheOption = new CacheOption()) {\r\n    const str = this.localStorage.getItem(key)\r\n    /**\r\n     * @type {CacheVal}\r\n     */\r\n    const cacheVal = safeExec(JSON.parse, null, str)\r\n    if (cacheVal === null) {\r\n      return null\r\n    }\r\n    /**\r\n     * @type {CacheOption}\r\n     */\r\n    const option = assign(this.cacheOption, cacheVal.cacheOption, cacheOption)\r\n    const { timeStart, timeout, deserialize } = option\r\n    // 如果超时则删除并返回 null\r\n    if (timeout !== TimeoutInfinite && Date.now() - timeStart > timeout) {\r\n      this.del(key)\r\n      return null\r\n    }\r\n    try {\r\n      const result = deserialize(cacheVal.val)\r\n      this.set(key, result, assign(option, { timeStart: Date.now() }))\r\n      return result\r\n    } catch (e) {\r\n      this.del(key)\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import { LocalStorageCache } from './LocalStorageCache'\r\nimport { TimeoutInfinite, CacheOption } from './CacheOption'\r\n\r\n/**\r\n * 默认使用的 {@link ICache} 接口的缓存实现\r\n */\r\nconst cache = new LocalStorageCache()\r\n\r\n/**\r\n * 缓存工具类\r\n * 主要实现缓存高阶函数的封装\r\n */\r\nexport class CacheUtil {\r\n  /**\r\n   * 包裹函数为缓存函数\r\n   * @param {Function} fn 一个接受一些参数并返回结果的函数\r\n   * @param {Object} [options={}] 缓存选项对象。可选项\r\n   * @param {String|Number} [options.identity=fn.toString()] 缓存标识。默认为函数 {@link toString}，但有时候不太可行（继承自基类的函数）\r\n   * @param {Number|String} [options.timeout=TimeoutInfinite] 缓存时间。默认为无限\r\n   * @returns {Function|Object} 带有缓存功能的函数\r\n   */\r\n  onceOfSameParam (\r\n    fn,\r\n    { identity = fn.toString(), timeout = TimeoutInfinite } = {}\r\n  ) {\r\n    const generateKey = args =>\r\n      `onceOfSameParam-${identity}-${JSON.stringify(args)}`\r\n    const innerFn = function (...args) {\r\n      const key = generateKey(args)\r\n      const cacheOption = new CacheOption({ timeout })\r\n      const val = cache.get(key)\r\n      if (val !== null) {\r\n        return val\r\n      }\r\n      const result = fn.call(this, ...args)\r\n      if (result instanceof Promise) {\r\n        return result.then(res => {\r\n          cache.set(key, res, cacheOption)\r\n          return res\r\n        })\r\n      }\r\n      cache.set(key, result, cacheOption)\r\n      return result\r\n    }\r\n    /**\r\n     * 所包装的原函数\r\n     * @type {Function}\r\n     */\r\n    innerFn.origin = fn\r\n    /**\r\n     * 清空缓存，清空指定参数调用时的函数缓存\r\n     * @type {Function}\r\n     */\r\n    innerFn.clear = function (...args) {\r\n      const key = generateKey(args)\r\n      cache.del(key)\r\n    }\r\n    return innerFn\r\n  }\r\n}\r\n\r\n/**\r\n * 导出一个默认的缓存工具对象\r\n */\r\nexport const cacheUtil = new CacheUtil()\r\n","/**\r\n * 空的函数\r\n * @param {Array.<Object>} args 接受任何参数\r\n */\r\nexport const emptyFunc = (...args) => {}\r\n","import { timing } from '../function/timing'\r\nimport { emptyFunc } from '../function/emptyFunc'\r\n\r\n/**\r\n * 禁止他人调试网站相关方法的集合对象\r\n */\r\nexport const antiDebug = {\r\n  /**\r\n   * 不停循环 debugger 防止有人调试代码\r\n   */\r\n  cyclingDebugger () {\r\n    setInterval(() => {\r\n      // eslint-disable-next-line no-debugger\r\n      debugger\r\n    }, 100)\r\n  },\r\n\r\n  /**\r\n   * 检查是否正在 debugger 并调用回调函数\r\n   * @param {Function} fn 回调函数，默认为重载页面\r\n   */\r\n  checkDebug (fn = () => window.location.reload()) {\r\n    setInterval(() => {\r\n      const diff = timing(() => {\r\n        for (let i = 0; i < 1000; i++) {\r\n          console.log(i)\r\n          console.clear()\r\n        }\r\n      })\r\n      if (diff > 500) {\r\n        console.log(diff)\r\n        fn()\r\n      }\r\n    }, 1000)\r\n  },\r\n\r\n  /**\r\n   * 禁用控制台调试输出\r\n   */\r\n  disableConsoleOutput () {\r\n    if (!window.console) {\r\n      return\r\n    }\r\n    Object.keys(console).forEach(k => (console[k] = emptyFunc))\r\n  },\r\n}\r\n","import { stringValidator } from './stringValidator'\r\n\r\n/**\r\n * 判断一个字符串是否为空白的字符串\r\n * @param {String} str 字符串\r\n * @returns {Boolean} 是否为空字符串\r\n * @deprecated 已废弃，请使用 {@link stringValidator#isBlank}\r\n */\r\nexport function isBlank (str) {\r\n  return stringValidator.isBlank(str)\r\n}\r\n","/**\r\n * 加载一个远程脚本文件\r\n * @param {String} src 远程脚本路径\r\n * @returns {Promise} 等待异步加载脚本完成\r\n */\r\nexport function loadScript (src) {\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement('script')\r\n    script.src = src\r\n    script.addEventListener('load', resolve)\r\n    script.addEventListener('error', reject)\r\n    document.body.appendChild(script)\r\n  })\r\n}\r\n","/**\r\n * 将一个谓词函数取反\r\n * @param {Function} fn 要取反的函数\r\n * @returns {Function} 取反得到的函数\r\n */\r\nexport const deny = fn =>\r\n  /**\r\n   * 包装后的函数\r\n   * @param {...any} args 函数的参数\r\n   * @returns {any} 函数的返回值取反\r\n   */\r\n  function (...args) {\r\n    const result = fn.apply(this, args)\r\n    if (result instanceof Promise) {\r\n      return result.then(res => !res)\r\n    }\r\n    return !result\r\n  }\r\n","import { isNullOrUndefined } from '../obj/isNullOrUndefined'\r\n\r\n/**\r\n * 数组校验器\r\n */\r\nexport class ArrayValidator {\r\n  /**\r\n   * 是否为空数组\r\n   * @param {Array} array 空数组\r\n   * @returns {Boolean} 是否为空数组\r\n   */\r\n  isEmpty (array) {\r\n    return (\r\n      isNullOrUndefined(array) ||\r\n      !(array instanceof Array) ||\r\n      array.length === 0\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * 导出一个默认的数组校验对象\r\n */\r\nexport const arrayValidator = new ArrayValidator()\r\n","/**\r\n * 路径工具\r\n */\r\nexport class PathUtil {\r\n  /**\r\n   * 拼接两个路径\r\n   *\r\n   * @param {String} pathStart 开始路径\r\n   * @param {String} pathEnd   结束路径\r\n   * @return {String} 拼接完成的两个路径\r\n   */\r\n  static _join (pathStart, pathEnd) {\r\n    if (pathStart.endsWith(PathUtil.Separator)) {\r\n      return (pathStart + pathEnd).replace(\r\n        PathUtil.Separator + PathUtil.Separator,\r\n        PathUtil.Separator\r\n      )\r\n    }\r\n    if (pathEnd.startsWith(PathUtil.Separator)) {\r\n      return pathStart + pathEnd\r\n    }\r\n    return pathStart + PathUtil.Separator + pathEnd\r\n  }\r\n  /**\r\n   * 拼接多个路径\r\n   *\r\n   * @param {...String} paths 路径数组\r\n   * @return {String} 拼接完成的路径\r\n   */\r\n  join (...paths) {\r\n    return paths.reduce(PathUtil._join)\r\n  }\r\n}\r\n/**\r\n * 路径分隔符\r\n */\r\nPathUtil.Separator = '/'\r\n\r\n/**\r\n * 导出一个路径工具类\r\n */\r\nexport const pathUtil = new PathUtil()\r\n","import { emptyFunc } from '../function/emptyFunc'\r\n\r\n/**\r\n * 自定义的日志类\r\n * 与浏览器默认的 {@link console} 拥有着完全相同的函数列表，唯一一点区别是包含了一个全局开关用于控制是否输出日志\r\n */\r\nexport class Logger {\r\n  /**\r\n   * 构造函数\r\n   * @param {Object} [options] 可选项\r\n   * @param {Boolean} [options.enable] 是否开启日志\r\n   */\r\n  constructor ({ enable = true } = {}) {\r\n    this.enable = enable\r\n  }\r\n\r\n  /**\r\n   * 设置 enable 的 setter 属性，在改变时合并对应的子类对象实现\r\n   */\r\n  set enable (enable) {\r\n    /**\r\n     * @field 是否开启全局控制台，该属性只写\r\n     */\r\n    this._enable = enable\r\n    Object.keys(console).forEach(\r\n      k => (this[k] = enable ? console[k] : emptyFunc)\r\n    )\r\n  }\r\n  /**\r\n   * 替代原生的 {@link console.log}\r\n   * 虽然这里只写了一个 log，但事实上 {@link console} 所有的函数都存在\r\n   * @param {Object} message 打印的消息\r\n   * @param {Array.<Object>} optionalParams 其他参数\r\n   * @abstract\r\n   */\r\n  log (message, ...optionalParams) {}\r\n}\r\n\r\n/**\r\n * 导出一个全局可用的 Logger 对象\r\n * 使用 enable 属性控制是否开启日志输出，默认为 true\r\n */\r\nexport const logger = new Logger()\r\n","import { getObjectKeys } from './getObjectKeys'\r\n\r\n/**\r\n * 将 Object 对象 转换为 Map\r\n * @param {Object} obj Object 对象\r\n * @returns {Map} 转换得到的 Map 键值表\r\n */\r\nexport function objectToMap (obj) {\r\n  // @ts-ignore\r\n  return getObjectKeys(obj).reduce((map, k) => map.set(k, obj[k]), new Map())\r\n}\r\n","/**\r\n * 将列表转换为树节点\r\n * 注: 该函数默认树的根节点只有一个，如果有多个，则返回一个数组\r\n * @param {Array.<Object>} list 树节点列表\r\n * @param {Object} [options] 其他选项\r\n * @param {Function} [options.isRoot] 判断节点是否为根节点。默认根节点的父节点为空\r\n * @returns {Object|Array.<String>} 树节点，或是树节点列表\r\n */\r\nexport function listToTree (list, { isRoot = node => !node.parentId } = {}) {\r\n  const res = list.reduce((root, sub) => {\r\n    list.forEach(parent => {\r\n      if (sub.parentId === parent.id) {\r\n        (parent.child = parent.child || []).push(sub)\r\n      }\r\n    })\r\n    if (isRoot(sub)) {\r\n      root.push(sub)\r\n    }\r\n    return root\r\n  }, [])\r\n  // 根据顶级节点的数量决定如何返回\r\n  const len = res.length\r\n  if (len === 0) return {}\r\n  if (len === 1) return res[0]\r\n  return res\r\n}\r\n","import { objectToMap } from '../obj/objectToMap'\r\n\r\n/**\r\n * 桥接对象不存在的字段\r\n * @param {Map.<String|Number|symbol, String|Number|symbol>|Object} map 代理的字段映射 Map\r\n * @returns {Function} 转换一个对象为代理对象\r\n */\r\nexport const bridge = map => {\r\n  if (!(map instanceof Map)) {\r\n    map = objectToMap(map)\r\n  }\r\n  /**\r\n   * 为对象添加代理的函数\r\n   * @param {Object} obj 任何对象\r\n   * @returns {Proxy} 代理后的对象\r\n   */\r\n  return function (obj) {\r\n    return new Proxy(obj, {\r\n      get (target, k) {\r\n        if (map.has(k)) {\r\n          return Reflect.get(target, map.get(k))\r\n        }\r\n        return Reflect.get(target, k)\r\n      },\r\n      set (target, k, v) {\r\n        if (map.has(k)) {\r\n          Reflect.set(target, map.get(k), v)\r\n          return true\r\n        }\r\n        Reflect.set(target, k, v)\r\n        return true\r\n      },\r\n    })\r\n  }\r\n}\r\n","/**\r\n * 基本的 Node 节点结构定义接口\r\n * @interface\r\n */\r\nexport class INode {\r\n  /**\r\n   * 构造函数\r\n   * @param {Object} [options] 可选项参数\r\n   * @param {String} [options.id] 树结点的 id 属性名\r\n   * @param {String} [options.parentId] 树结点的父节点 id 属性名\r\n   * @param {String} [options.child] 树结点的子节点数组属性名\r\n   * @param {String} [options.path] 树结点的全路径属性名\r\n   * @param {Array.<Object>} [options.args] 其他参数\r\n   */\r\n  constructor ({ id, parentId, child, path, ...args } = {}) {\r\n    /**\r\n     * @field 树结点的 id 属性名\r\n     */\r\n    this.id = id\r\n    /**\r\n     * @field 树结点的父节点 id 属性名\r\n     */\r\n    this.parentId = parentId\r\n    /**\r\n     * @field 树结点的子节点数组属性名\r\n     */\r\n    this.child = child\r\n    /**\r\n     * @field 树结点的全路径属性名\r\n     */\r\n    this.path = path\r\n    Object.assign(this, args)\r\n  }\r\n}\r\n","import { arrayValidator } from '../array/arrayValidator'\r\nimport { returnItself } from '../function/returnItself'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { INode } from './Node'\r\n\r\n/**\r\n * 遍历并映射一棵树的每个节点\r\n * @param {Object} root 树节点\r\n * @param {Object} [options] 其他选项\r\n * @param {Function} [options.before=returnItself] 遍历子节点之前的操作。默认返回自身\r\n * @param {Function} [options.after=returnItself] 遍历子节点之后的操作。默认返回自身\r\n * @param {Function} [options.paramFn=(node, args) => []] 递归的参数生成函数。默认返回一个空数组\r\n * @returns {INode} 递归遍历后的树节点\r\n */\r\nexport function treeMapping (\r\n  root,\r\n  {\r\n    before = returnItself,\r\n    after = returnItself,\r\n    paramFn = (node, ...args) => [],\r\n  } = {}\r\n) {\r\n  /**\r\n   * 遍历一颗完整的树\r\n   * @param {INode} node 要遍历的树节点\r\n   * @param  {...Object} [args] 每次递归遍历时的参数\r\n   */\r\n  function _treeMapping (node, ...args) {\r\n    // 之前的操作\r\n    let _node = before(node, ...args)\r\n    const childs = _node.child\r\n    if (arrayValidator.isEmpty(childs)) {\r\n      return _node\r\n    }\r\n    // 产生一个参数\r\n    const len = childs.length\r\n    for (let i = 0; i < len; i++) {\r\n      childs[i] = _treeMapping(childs[i], ...paramFn(_node, ...args))\r\n    }\r\n    // 之后的操作\r\n    return after(_node, ...args)\r\n  }\r\n  return _treeMapping(root)\r\n}\r\n","import { returnItself } from '../function/returnItself'\r\nimport { treeMapping } from './treeMapping'\r\n\r\n/**\r\n * 将树节点转为树节点列表\r\n * @param {Object} root 树节点\r\n * @param {Object} [options] 其他选项\r\n * @param {Function} [options.bridge=returnItself] 代理函数，默认返回自身\r\n * @param {Boolean} [options.calcPath=false] 是否计算节点全路径，默认为 false\r\n * @returns {Array.<Object>} 树节点列表\r\n */\r\nexport function treeToList (\r\n  root,\r\n  { bridge = returnItself, calcPath = false } = {}\r\n) {\r\n  const res = []\r\n  // @ts-ignore\r\n  treeMapping(root, {\r\n    before (node, parentPath) {\r\n      const _node = bridge(node)\r\n      // 是否计算全路径\r\n      if (calcPath) {\r\n        _node.path = (parentPath ? parentPath + ',' : '') + _node.id\r\n      }\r\n      // 此时追加到数组中\r\n      res.push(_node)\r\n      return _node\r\n    },\r\n    paramFn: node => (calcPath ? [node.path] : []),\r\n  })\r\n  return res\r\n}\r\n","/**\r\n * 桥接对象为标准的树结构 {@link INode}\r\n */\r\nexport class INodeBridge {\r\n  /**\r\n   * 构造函数\r\n   * @param {Object} [options] 桥接对象\r\n   * @param {String} [options.id='id'] 树结点的 id 属性名\r\n   * @param {String} [options.parentId='parentId'] 树结点的父节点 id 属性名\r\n   * @param {String} [options.child='child'] 树结点的子节点数组属性名\r\n   * @param {String} [options.path='path'] 树结点的全路径属性名\r\n   * @param {Array.<Object>} [options.args] 其他参数\r\n   */\r\n  static bridge ({\r\n    id = 'id',\r\n    parentId = 'parentId',\r\n    child = 'child',\r\n    path = 'path',\r\n    ...args\r\n  } = {}) {\r\n    /**\r\n     * @field 树结点的 id 属性名\r\n     */\r\n    this.id = id\r\n    /**\r\n     * @field 树结点的父节点 id 属性名\r\n     */\r\n    this.parentId = parentId\r\n    /**\r\n     * @field 树结点的子节点数组属性名\r\n     */\r\n    this.child = child\r\n    /**\r\n     * @field 树结点的全路径属性名\r\n     */\r\n    this.path = path\r\n    Object.assign(this, args)\r\n  }\r\n}\r\n","import { bridge } from '../function/bridge'\r\nimport { INodeBridge } from './NodeBridge'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { INode } from './Node'\r\nimport { treeMapping } from './treeMapping'\r\n\r\nexport class NodeBridgeUtil {\r\n  /**\r\n   * 桥接对象为标准的树结构\r\n   * @param {INodeBridge} [nodeBridge=new INodeBridge()] 桥接对象\r\n   * @returns {Function} 代理函数\r\n   */\r\n  bridge (nodeBridge) {\r\n    return bridge(Object.assign(new INodeBridge(), nodeBridge))\r\n  }\r\n  /**\r\n   * 桥接一棵完整的树\r\n   * @param {INode} tree 树节点\r\n   * @param {INodeBridge} [nodeBridge=new INodeBridge()] 桥接对象\r\n   * @returns {INode} 代理后的树对象\r\n   */\r\n  bridgeTree (tree, nodeBridge) {\r\n    return treeMapping(tree, {\r\n      before: this.bridge(nodeBridge),\r\n    })\r\n  }\r\n  /**\r\n   * 桥接一个树节点列表\r\n   * @param {Array.<INode>} list 树节点列表\r\n   * @param {INodeBridge} [nodeBridge=new INodeBridge()] 桥接对象\r\n   * @returns {Array.<INode>} 代理后的树节点列表\r\n   */\r\n  bridgeList (list, nodeBridge) {\r\n    // @ts-ignore\r\n    return list.map(this.bridge(nodeBridge))\r\n  }\r\n}\r\n\r\n/**\r\n * 导出一个 NodeBridgeUtil 的实例\r\n */\r\nexport const nodeBridgeUtil = new NodeBridgeUtil()\r\n"],"names":["DateConstants","dateConstants"],"mappings":"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"}